@import '../fonts/font-awesome-4.7.0/scss/font-awesome.scss';
@import '../../css/core/breakpoints';

/*
    Pre-requisites
    ==================================================================================================
    -   This file applies to WebMaker v10.5 onwards.

    WARNING: This file is used by different parts of the studio, including the Page Designer and Theme Designer
    Be careful when making changes since invalidating this file may stop certain studio features working.
    You can always revert by reselecting and making current one of the System Themes using the Theme Designer.


    Quick Start - How to use your own CSS Styling in WebMaker applications
    ==================================================================================================
    1. SASS and Themes      Alter the theme parameters for fonts, colours, images, etc., to quickly and progressively alter and create new look-and feel.
                            These parameters are located towards the top of the file under section PRIMARY THEME PARAMETERS.
                            These are the parameters that are displayed on the left hand side of the Theme Editor popup.
                            Within various themes you can locate animation and transition effects next to different elements.
                            You can click and hover over these to reveal the effects. Some of these effects also need access to some javascript
                            functions located in file theme.js
    2. Controls             To style a control, search or highlight all selectors containing the control name class.
                            E.g. .labelControl .textboxControl, etc.
    3. Theme Aspects        To change application-wide aspects such as borders, colors, etc.,
                            you can locate selectors with a grouping of all controls that are affected.
                            Search for the property of interest such as border, margin, etc.
    4. Control Structure    Each WebMaker control is defined by a containing html element, which will always have a class attribute
                            containing the control name. E.g. <div class="textboxControl"...>
                            The internal structure of each control will be different, sometimes for the same control,
                            depending on the usage scenario of the control. You should adapt your styling to ensure this is catered for
                            and you will see examples of this in this SASS file where multiple selectors are used for the same control
                            depending on its usage scenario. E.g. a buttonControl might look different when it resides in a table.
    5. Generic Styles       There are some generic styles that apply to multiple controls, which you may need to change
                            to complete your application design. You can locate these towards the end of the file.
    6. More Help            You can create new projects based on different templates to learn more about the different approaches
                            that are used for styling WebMaker applications.
    7. Font Scaling         You will find font scaling selectors and mixins towards the end of this file.

*/

/* ***************************************************************************************************************** */
/* PRIMARY THEME PARAMETERS - Variables that control most aspects of the theme.                                      */
/* The overall theme can be changed by simply altering these parameters as required.                                 */
/* SASS is used to generate and progressively create the colour combinations that can then be altered individually.  */
/* ***************************************************************************************************************** */

/*****************************/
/* THEME - hyf_transitions   */
/*****************************/

/* Two main inspiration colours, used to to derive the rest of the colour palette */
$iColourOne: white;                                     $iColourOneUsage: "Main App Colours...";
$iColourTwo:rgba(145,135,66,1);                         $iColourTwoUsage: "Buttons, Links, Icons, Etc...";

/*  Overall colour palette, containing all colours that are used throughout the theme.
    Derived from the two main inspiration colours, which can be overridden in this section.
    Unless overridden, changes to the two main inspiration colours palette will filter down individual swatches in this section. */
$pColourOne: darken($iColourOne, 0%);                   $pColourOneUsage: "Background...";
$pColourTwo: rgba(darken($iColourOne, 10%), 0.5);       $pColourTwoUsage: "Default Panel...";
$pColourThree: darken($iColourOne, 70%);                $pColourThreeUsage: "Default Text, Label...";
$pColourFour: $iColourTwo;                              $pColourFourUsage: "Font Icon, Panel Header Text, Button Background, Anchor...";
$pColourFive: darken($iColourOne, 5%);                  $pColourFiveUsage: "Control Background...";
$pColourSix: rgba($pColourThree, 0.5);                  $pColourSixUsage: "Disabled Text, Unselected Text...";
$pColourSeven: $iColourOne;                             $pColourSevenUsage: "Panel Header, Secondary Button Background, Button Text...";
$pColourEight: darken($iColourTwo, 5%);                 $pColourEightUsage: "Active Button Background, Secondary Active Button Background...";
$pColourNine: darken($iColourTwo, 5%);                  $pColourNineUsage: "Button Hover Background, Anchor Hover Text...";
$pColourTen: lighten($iColourTwo, 10%);                 $pColourTenUsage: "Default Border, Panel Border...";
$pColourEleven: #FF5959;                                $pColourElevenUsage: "Error...";
$pColourTwelve: darken($pColourThree, 20%);             $pColourTwelveUsage: "Emphasis...";
$pColourThirteen: #6FA598;                              $pColourThirteenUsage: "Success...";
$pColourFourteen:rgba(145,135,66,0.2);                  $pColourFourteenUsage: "Unselected Background, Unselected Border...";
$pColourFifteen: rgba(255, 255, 255, 0.4);              $pColourFifteenUsage: "Secondary Hover Background...";
$pColourSixteen: rgba($iColourTwo, 0.3);                $pColourSixteenUsage: "Default Hover Background...";
$pColourSeventeen: rgba(0, 0, 0, 0);                    $pColourSeventeenUsage: "Gradient Start...";
$pColourEighteen: rgba(0, 0, 0, 0.1);                   $pColourEighteenUsage: "Gradient End...";
$pColourNineteen: rgba(255, 255, 255, 0.1);             $pColourNineteenUsage: "Colour Filter for Background...";

/*  Different application elements use different palette colours.
    These can be overridden by using the entries for each separate component.
    Unless overridden, changes to the main colour palette will filter down to individual elements in this section */
$backgroundColour: $pColourOne;                         $backgroundColourUsage: "Main Background";
$defaultBorderColour: $pColourTen;                      $defaultBorderColourUsage: "Default Border";

$defaultPanelColour: $pColourTwo;                       $defaultPanelColourUsage: "Panel Background";
$panelBorderColour: $pColourTen;                        $panelBorderColourUsage: "Panel Border";
$panelHeaderColour: $pColourSeven;                      $panelHeaderColourUsage: "Panel Header Background";
$panelHeaderTextColour: $pColourFour;                  $panelHeaderTextColourUsage: "Panel Header Text";

$labelColour: $pColourThree;                            $labelColourUsage: "Label Text";
$defaultControlBgColour: $pColourFive;                  $defaultControlBgColourUsage: "Control Background";
$defaultTextColour: $pColourThree;                      $defaultTextColourUsage: "Default Text";
$disabledTextColour: $pColourSix;                       $disabledTextColourUsage: "Disabled Text";

$buttonBgColour: $pColourFour;                          $buttonBgColourUsage: "Button Background";
$buttonBorderColour: $pColourFour;                      $buttonBorderColourUsage: "Button Border";
$buttonTextColour: $pColourSeven;                       $buttonTextColourUsage: "Button Text";
$buttonHoverBgColour: $pColourNine;                     $buttonHoverBgColourUsage: "Button Hover Background";
$buttonActiveBgColour: $pColourEight;                   $buttonActiveBgColourUsage: "Active Button Background";

$buttonSecondaryBgColour: rgba($buttonBgColour, 0.0);                  $buttonSecondaryBgColourUsage: "Secondary Button Background";
$buttonSecondaryTextColour: $pColourFour;               $buttonSecondaryTextColourUsage: "Secondary Button Text Colour";
$buttonSecondaryHoverBgColour: $pColourFifteen;         $buttonSecondaryHoverBgColourUsage: "Secondary Button Hover Background";
$buttonSecondaryActiveBgColour: rgba($buttonActiveBgColour, 0.1);          $buttonSecondaryActiveBgColourUsage: "Secondary Active Button Background";

$anchorColour: $pColourFour;                            $anchorColourUsage: "Anchor";
$anchorHoverTextColour: $pColourNine;                   $anchorHoverTextColourUsage: "Anchor Hover Text";

$defaultFontIconColour: $pColourFour;                   $defaultFontIconColourUsage: "Font Icon";

$successColour: $pColourThirteen;                       $successColourUsage: "Success";
$errorColour: $pColourEleven;                           $errorColourUsage: "Error";
$emphasisColour: $pColourTwelve;                        $emphasisColourUsage: "Emphasis";

$gradientStartColour: $pColourSeventeen;                $gradientStartColourUsage: "Gradient Start";
$gradientEndColour: $pColourEighteen;                   $gradientEndColourUsage: "Gradient End";

$defaultHoverBackgroundColour: $pColourSixteen;         $defaultHoverBackgroundColourUsage: "Default Hover Background";
$alternateRowBgColour: darken($defaultPanelColour, 5%); $alternateRowBgColourUsage: "Alternate Row Background";

$backgroundFilterColour:$pColourNineteen;               $backgroundFilterColourUsage: "Colour Filter over Background Image";
$panelFilterColour:$pColourNineteen;                    $panelFilterColourUsage: "Colour Filter over Panel Image";

$unselectedBackgroundColour: $pColourFourteen;          $unselectedBackgroundColourUsage: "Unselected Background";
$unselectedBorderColour: $pColourFourteen;              $unselectedBorderColourUsage: "Unselected Border";
$unselectedTextColour: $pColourSix;                     $unselectedTextColourUsage: "Unselected Text";

$bodyFontSize: 14px;
$labelFontSize: 14px;
$controlFontSize: 16px;

$pageHeadingFontSize: 32px;
$sectionHeadingFontSize: 24px;
$subHeadingFontSize: 18px;
$taglineFontSize: 18px;

$smallFontIconSize: 12px; /* small open, close buttons, etc. */
$mediumFontIconSize: 16px; /* medium open, close buttons, placeholders, etc. */
$largeFontIconSize: 18px;
$xLargeFontIconSize: 24px;
$jumboFontIconSize: 48px; /* Unused? */

$baseBorderRadius: 5px;
$smallBorderRadius: $baseBorderRadius * 0.65;
$mediumBorderRadius: $baseBorderRadius;
$largeBorderRadius: $baseBorderRadius * 2;

$defaultFontFamily : 'Maven Pro', Play, Verdana, Arial;
$defaultFontIconFamily: FontAwesome;

$backgroundImage:url("../images/blake-richard-verdoorn-23459.jpg");
$backgroundImageSize:cover;
$backgroundImageAttachment:fixed;
$backgroundImageRepeat:repeat;
$backgroundImagePosition:top left;
$panelImage:none;
$panelImageSize:100% 100%;
$panelImageAttachment:scroll;
$panelImageRepeat:no-repeat;
$panelImagePosition: top left;

//START FONT DEFINITIONS
@font-face {
  font-family: 'Play';
  font-style: normal;
  font-weight: 400;
  src: local('Play Regular'), local('Play-Regular'), url(../fonts/Play-Regular.woff) format('woff');
}

@font-face {
  font-family: 'Maven Pro';
  font-style: normal;
  font-weight: 400;
  src: local('MavenPro Regular'), url(../fonts/MavenPro-Regular.woff) format('woff');
}
//END FONT DEFINITIONS


/* Animation Samples - Works in conjunction with animations.js */
@keyframes enterFromRight {
    from {left: 150px; opacity: 0;}
    to {left: 0px; opacity: 1;}
}

@keyframes enterFromLeft {
    from {left: -150px; opacity: 0;}
    to {left: 0px; opacity: 1;}
}

@keyframes enterFromTop {
    from {top: -150px; opacity: 0;}
    to {top: 0px; opacity: 1;}
}

@keyframes enterFromBottom {
    from {bottom: -150px; opacity: 0;}
    to {bottom: 0px; opacity: 1;}
}

.hidePreAnimation {
    opacity: 0.0;
}

.easeInFromRight {
    position: relative;
    animation-name: enterFromRight;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    opacity: 1.0;
}

.easeInFromLeft {
    position: relative;
    animation-name: enterFromLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    opacity: 1.0;
}
.easeInFromTop {
    position: relative;
    animation-name: enterFromTop;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    opacity: 1.0;
}
.easeInFromBottom {
    position: relative;
    animation-name: enterFromBottom;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    opacity: 1.0;
}

.shrink-text {
    transition: font-size 1.0s;
    transition-timing-function: ease-out;
}

.expand-text {
    font-size: 100px !important;
    color: red;
    transition: font-size 1.0s;
    transition-timing-function: ease-out;
}



.emphasis {
    color: $emphasisColour !important;
}

body
{
    font-family: $defaultFontFamily;
    font-size: $bodyFontSize;
    background-color: $backgroundColour;
    background-image: linear-gradient(0, $backgroundFilterColour, $backgroundFilterColour), $backgroundImage;
    background-attachment: $backgroundImageAttachment;
    background-size: $backgroundImageSize;
    background-position: $backgroundImagePosition;
    background-repeat: $backgroundImageRepeat;
}


/* General margin/padding reset */
body, div, dl, dt, dd, li, h1, h2, h3, h4, h5, h6, pre, form, fieldset, input, textarea, p, blockquote, th, td {
    margin: 0;
    padding: 0;
}


/* ***************************************************************************************************************** */
/* GROUP HEADINGS, BACKGROUNDS and BORDERS - Including tabs, accordions, table headings, etc.                        */
/* ***************************************************************************************************************** */


.groupWrapper > .labelControl,
.tabContainer .selectedTab, .tabContainer .unselectedTab,
.accordionContainer .dijitAccordionTitle,
.collapsibleSection .collapsibleHeader,
.dijitDialog .dijitDialogTitleBar,
.menuControl .menu
{
    background: none; /* Remove any inherited backgrounds such as dojo accordions */
    background-color: $panelHeaderColour;
    background-image : linear-gradient(to bottom, $gradientStartColour 0%, $gradientEndColour 90%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#33000000',GradientType=0 ); /* IE6-9 */
    background-repeat: repeat-x;
    padding: 10px 15px;
}

.groupWrapper > .labelControl .label,
.tabContainer .selectedTab, .tabContainer .unselectedTab,
.accordionContainer .dijitAccordionTitle,
.collapsibleSection .collapsibleHeader .toggleLabelBackground,
.dijitDialog .dijitDialogTitleBar
{
    display:inline-block;
    color: $panelHeaderTextColour;
    font-family: $defaultFontFamily;
    font-size: $subHeadingFontSize;
    font-weight: normal;
    margin-top:0px ; /* Overrides dojo h2 styling */
    margin-bottom:0px;
}


/* Group Backgrounds and Borders */
.borderedGroupWrapper, .collapsibleSection, .tabContainer .tabPane
{
    background-color: $defaultPanelColour;
    border: 1px solid $panelBorderColour;
}

.borderedGroupWrapper {
    margin : 5px;
    border-radius: $smallBorderRadius;
}

.borderedGroupWrapper > .borderedGroup, .collapsibleSection > .collapsibleContentWrapper > .collapsibleContent , .tabContainer .tabPane
  {
      padding : 10px;
  }


.dijitDialog {
    border-radius: $mediumBorderRadius;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    background: none !important;
}

.dijitDialog .dijitDialogTitleBar {
    display:block;
}

.dijitDialog .dijitDialogTitleBar .dijitDialogCloseIcon {
    background:none; /* Dojo blocker */
    top : 12px;
    float: right;
}

.dijitDialog .dijitDialogTitleBar .dijitDialogCloseIcon:hover {
    cursor:pointer;
}

.dijitDialog .dijitDialogTitleBar .dijitDialogCloseIcon:before {
    font-family:'FontAwesome';
    content:"\f00d";
    font-size: $smallFontIconSize;
}

.dijitDialog .dijitDialogTitleBar .dijitDialogTitle
{
    color: $defaultTextColour;
    font-family: $defaultFontFamily;
    font-size: $sectionHeadingFontSize;
    font-weight:normal;
    padding: 3px 20px 3px 3px;
}

.dijitDialog .dijitDialogPaneContent {
    background-color: $defaultPanelColour !important;
    border: 1px solid $defaultBorderColour !important;
}

.dijitDialog .closeText {
    display:none;
}

.dijitDialogUnderlayWrapper {
    position :absolute;

    .dijitDialogUnderlay {
     	   background-color : $backgroundFilterColour;
    }
}


/* Tabs */

.tabContainer {
    margin-top : 10px;
    margin-bottom : 10px;
}

.tabContainer > .controlWrapper .controlBody {
    margin:0px 5px;
}
.tabContainer > .controlWrapper {
    border-bottom : 1px solid $buttonBorderColour;
}

.tabContainer .unselectedTab, .tabContainer .selectedTab
{
    text-decoration: none;
    padding: 10px 15px;
    margin : 0px 1px;
    float : left;
    border-radius: $mediumBorderRadius $mediumBorderRadius 0px 0px
}

.tabContainer .unselectedTab
{
    color: $buttonBgColour;
    background-color: $unselectedBackgroundColour;
    border : 1px solid $unselectedBorderColour;
    border-bottom: none;


    cursor:pointer;
}

.tabContainer .unselectedTab:hover {
    color: $anchorHoverTextColour;
    /*background-color: $buttonHoverBgColour;*/
}

.tabContainer .selectedTab
{
    color: $buttonTextColour;
    background-color: $buttonBgColour;
    border : 1px solid $buttonBorderColour;
    border-bottom : 1px solid transparent;
    margin-bottom : -1px;
    cursor:auto;
}

.tabContainer .tabPane {
    padding-top : 10px;
}

.fieldsetGroup
{
    padding-left: 10px;
}


/* Table cells */
.repeat .table > td
{
    /* background-color: white; */ /* overrides the firstRow and alternateRow. */
    border-top: 1px solid $defaultBorderColour;
    padding: 6px;
}

.repeat .firstRow,
.editableTableContainer tbody:first-of-type tr:nth-child(odd)
{
    background-color: $defaultPanelColour;
}
.repeat .alternateRow,
.editableTableContainer tbody:first-of-type tr:nth-child(even)
{
    background-color: $alternateRowBgColour;
}

.repeat .firstColumn
{
    background-color: $defaultPanelColour;
}
.repeat .alternateColumn
{
    background-color: $backgroundColour;
}

.repeat .table:hover > td,
/*.pagingTableContainer .repeat > tbody > tr.tablesorter-childRow:hover > td,*/
.pagingTableContainer tr.table:hover + tr.tablesorter-childRow > td,
.pagingTableContainer tr.table:hover + tr.tablesorter-childRow + tr.tablesorter-childRow > td,
.pagingTableContainer tr.table:hover + tr.tablesorter-childRow + tr.tablesorter-childRow + tr.tablesorter-childRow > td
{
    background-color: $defaultHoverBackgroundColour;
}

/* required to stretch tables by default to match their containers.
 * Can set fixed width for table on the container if required */
table.repeat
{
    width: 100%;
}

.repeat .noRepeatData
{
    padding : 9px;
}

/* **************************************************************************************************************************** */
/* LABEL CONTROL - Labels are treated like other controls, but handled within their own selectors to allow easier theme changes. */
/* **************************************************************************************************************************** */
.labelControl
{
    vertical-align: top;
}

.labelControl .label
{
    display: inline-block;
    font-family: $defaultFontFamily;
    font-size: $labelFontSize;
    font-weight: normal;
    color: $labelColour;
    white-space : normal;
    margin: 10px 3px 10px 3px;
    width: 200px;
}

 /* Adjust the margins for the labels above and below scenarios to make it clearer which
 * label belongs to which control.
 * As you can have different label positions for different breakpoints we need to make sure
 * that larger breakpoint settings override earlier ones.
 * eg A common default is to have both labelAbove and labelLeftMedium classes
 */
@include createForEachBreakpointWithDefault() using ($bp) {
    .labelAbove#{$bp} > .labelControl .label
    {
        margin-bottom : 0px;
        margin-top: 10px;
    }
    .labelBelow#{$bp} > .labelControl .label
    {
        margin-top : 0px;
        margin-bottom: 10px;
    }
    .labelLeft#{$bp} > .labelControl .label,
    .labelRight#{$bp} > .labelControl .label
    {
        margin-top : 10px;
        margin-bottom: 10px;
    }
}



/* Labels as table column headings
   The selectors handle normal labels and group labels appearing as table column headings.
   i.e. same usage context for two different types of controls. */
.repeat th.labelControl,
.pagingTableContainer .tablesorter-filter-row td
{
    background-color: $panelHeaderColour;
    /*border-bottom: 1px solid $panelBorderColour;*/
    padding: 9px;
    width: auto;
}

.repeat th.labelControl .label,
.repeat td.labelControl .label,
.repeat th.labelControl.label,
.repeat td.labelControl.label,
.repeat caption
{
    color: $labelColour;
    vertical-align:top;
    margin : auto;
    font-weight: normal;
    width : auto;
}

.repeat td.labelControl.label,
.repeat caption
{
    text-align: center;
}

/* **************************************************************************************************************************** */
/* PRIMITIVE CONTROLS - COMMON                                                                                                  */
/* **************************************************************************************************************************** */

/*.selectControl .select option:hover,*/
.multiSelectControl .select option:hover, .dijitComboBoxMenu .dijitMenuItem:hover {
    background-color: $defaultHoverBackgroundColour;
}

/* Generic container inside each logical control to include additional markup and in-effect create a composite structure for each control. */
.controlBody {
    display: inline-block;
    white-space:nowrap;
}

/* Fonts and Colours */
.textboxControl .textbox, .buttonControl .button, .hyperlinkControl .button, .hyperlinkControl .hyperlink, .checkboxControl .checkbox, .switchControl .checkbox,
.multiCheckboxControl .checkbox, .selectControl .select, .multiSelectControl .select, .radioControl .radio, .outputControl .output,
.dateControl .textbox, .splitDateControl .textbox, .textareaControl .textbox, .secretControl .textbox, .paragraph, .customControl,
.pagingTableContainer .tablesorterPager .pagesize, .pagingTableContainer .tablesorterPager .pagedisplay,
#calendarDiv, #calendarDiv a, #messageDiv, #calendarDiv input.cpMonthNavigation, #calendarDiv input.cpYearNavigation,
.topLevelMessage, .messageBox, .hintIcon, .errorIcon,
.currencyControl .dijitInputInner, .filteringSelectControl .dijitInputInner, .numberControl .dijitInputInner, .spinnerControl .dijitInputInner,
.treeControl .node-collapsible, .treeControl .node-expandable, .treeControl .leafText,
.editableTableContainer .editabletable_insert_btn, .editableTableContainer .output,
.richTextEditorControl .richTextEditor, .imageControl img,
.pagingTableContainer .tablesorter-filter-row .tablesorter-filter,
.autocompleteControl .select2-container .select2-selection--multiple .select2-selection__choice,
.autocompleteControl .select2-container .select2-selection--multiple .select2-search__field, .select2-results__options,
.autocompleteControl select.select.autocomplete,
.repeat .noRepeatData,
.fileUploadControl .button, .fileUploadControl .output, .fileUploadControl .dragArea,
.menuControlPopup tr.dijitMenuItem td, .sliderControl .output,
.bodyTextControl .output
{
    font-family: $defaultFontFamily;
    font-size: $controlFontSize;
    color: $defaultTextColour;
}

/* .multiCheckboxControl .checkbox, .radioControl .radio, .outputControl .output, .editableTableContainer .output
{
    color : $defaultTextColour;
} */


.dijitPlaceHolder
{
    color: $unselectedTextColour;
    font-size: $controlFontSize;
    font-style:normal;
    position: absolute;
    top: 0;
    left: 0;
    white-space: nowrap;
    pointer-events: none;
}

input::placeholder, textarea::placeholder
{
    color: $unselectedTextColour;
    font-style: normal;
    opacity : 1;
}
input::-ms-input-placeholder
{
    color: $unselectedTextColour;
    font-style: normal;
}

/* Padding */ /* Dojo blocker override - this is set to !important  - dojo ignores padding on the actual input tags */
.textboxControl .textbox, .buttonControl .button, .hyperlinkControl .button, .hyperlinkControl .hyperlink, .selectControl .select,
.multiSelectControl .select, .dateControl .textbox, .splitDateControl .textbox, .textareaControl .textbox, .secretControl .textbox,
.paragraph, .customControl, .pagingTableContainer .tablesorterPager .pagesize, .pagingTableContainer .tablesorterPager .pagedisplay,
.currencyControl .dijitTextBox, .filteringSelectControl .dijitInputField, .numberControl .dijitTextBox, .spinnerControl .dijitInputField,
.editableTableContainer .editabletable_insert_btn, .editableTableContainer .output,
.pagingTableContainer .tablesorter-filter-row .tablesorter-filter,
.autocompleteControl .select2-container,
.fileUploadControl .button, .fileUploadControl .output, .fileUploadControl .dragArea,
.sliderControl .controlBody, .multiCheckboxControl .controlBody, .radioControl .controlBody,
.outputControl .output, .fontIconControl .fontIcon, .editableTableContainer .output, .fileUploadControl .output
{
    padding: 10px;
}

.autocompleteControl .select2-container {
    padding-top: 4px;
    padding-bottom: 4px;
}

/** This needs additional padding due to not having any text content. */
.checkboxControl .controlBody
{
    padding : 12px 10px 13px 10px;
}
.switchControl .controlBody
{
    padding : 4px 10px 3px 10px;
}

/* The hyperlink control has its own custom padding settings.
 * This is a combination of the above, as no borders so needs extra top and bottom padding,
 * and no validation etc so no need for lots of right padding for the icon.
 * Also as just text, we want less left/right padding so that the text lines up with the edges of other controls.
 */
.hyperlinkControl .hyperlink {
    padding-left : 2px;
    min-height : 34px;
    display: inline-block;
}

/** the fileupload button needs slightly less top and bottom padding as the control body around it will have a border. */
.fileUploadControl .button
{
    padding-top : 9px;
    padding-bottom : 9px;
}


/* Spinner needs to be given extra width to allow for the right padding. */
.spinnerControl .dijitSpinner {
    width:75px;
}
/* move the left padding to the container with the border for spinner controls. */
.spinnerControl .dijitInputField {
    padding-left : 0;
}
.spinnerControl .dijitTextBox {
    padding-left : 10px;
}

/* Standard selects appear to add some left padding by default. */
.selectControl .select, .multiSelectControl .select
{
    padding-left: 7px;
    padding-top : 9px;
    padding-bottom : 9px;
}

.outputControl .output, .editableTableContainer .output {
    padding-left : 0;
}

.sliderControl .output {
    padding-left : 12px;
}

/* alignment of multi check/radio options */
.multiCheckboxControl .dataPart, .radioControl .dataPart
{
    column-gap: 12px;
    row-gap: 12px;
}
.multiCheckboxControl .dataPart .selectBoolean, .radioControl .dataPart .selectBoolean
{
    margin : auto 3px;
    display: inline-block;
    padding-top : 2px;
    vertical-align: middle;
}
.multiCheckboxControl .dataPart .selectBooleanCaption, .radioControl .dataPart .selectBooleanCaption
{
    display: inline-block;
    vertical-align: middle;
}

/* Margins */
.buttonControl .button, .hyperlinkControl .button, .hyperlinkControl .hyperlink, .checkboxControl .checkbox,
.checkboxControl .selectBooleanEntry, .checkboxControl .selectBooleanTable, .multiCheckboxControl .checkbox, .multiCheckboxControl .selectBooleanEntry,
.multiCheckboxControl .selectBooleanTable, .multiSelectControl .select, .radioControl .selectBooleanEntry,
.radioControl .selectBooleanTable, .outputControl .output, .dateControl .textbox, .splitDateControl .textbox, .textareaControl .textbox, .secretControl .textbox, .imageControl .image,
.customControl, .pagingTableContainer .tablesorterPager .pagesize, .pagingTableContainer .tablesorterPager .pagedisplay,
.currencyControl .dijitTextBox, .filteringSelectControl .dijitTextBox, .numberControl .dijitTextBox, .spinnerControl .dijitTextBox,
.fileUploadControl .button, .fileUploadControl .output
{
     margin: 0;
}

.paragraph,
.controlBody {
    margin: 3px 5px 5px 3px;
}

.outputControl .output, .editableTableContainer .output, .hyperlinkControl .hyperlink, .radioControl .selectBooleanEntry, .checkboxControl .selectBooleanEntry,
.multiCheckboxControl .selectBooleanEntry, .fileUploadControl .output, .bodyTextControl .output
{
    display: inline-block;
}

/* Borders and Transitions */
.buttonControl .button, .hyperlinkControl .button, .textboxControl .textbox, .selectControl .select, .dateControl .textbox, .splitDateControl .textbox,
.multiSelectControl .select, .textareaControl .textbox, .secretControl .textbox,
.currencyControl .dijitTextBox, .filteringSelectControl .dijitTextBox, .numberControl .dijitTextBox, .spinnerControl .dijitTextBox,
.pagingTableContainer .tablesorterPager .pagesize,
.checkboxControl .controlBody, .switchControl .controlBody, .multiCheckboxControl .controlBody, .radioControl .controlBody,
.editableTableContainer .editabletable_insert_btn,
.pagingTableContainer .tablesorter-filter-row .tablesorter-filter,
.autocompleteControl .select2-container--default,
#calendarDiv .cpSelectBtn, #calendarDiv select.cpMonthNavigation, #calendarDiv select.cpYearNavigation, #calendarDiv input.cpMonthNavigation, #calendarDiv input.cpYearNavigation,
.fileUploadControl .controlBody, .fileUploadControl .button, .fileUploadControl .dragArea,
.sliderControl .controlBody

{
    border: 1px solid $defaultBorderColour;
    border-radius: $smallBorderRadius;
    opacity: 0.7;
    overflow : hidden; /* Stop the buttons on eg filtering select and spinner from appearing through the rounded corners. */
    transition: background-color 0.8s, border-color 0.8s, opacity 0.8s;
}

/* Background Colours */
.buttonControl .button, .hyperlinkControl .button, .textboxControl .textbox, .selectControl .select, .dateControl .textbox, .splitDateControl .textbox,
.multiSelectControl .select, .textareaControl .textbox, .secretControl .textbox,
.currencyControl .dijitTextBox, .dijitComboBoxMenu, .filteringSelectControl .dijitTextBox, .numberControl .dijitTextBox, .spinnerControl .dijitTextBox,
.checkboxControl .controlBody, .switchControl .controlBody, .multiCheckboxControl .controlBody, .radioControl .controlBody,
.pagingTableContainer .tablesorterPager .pagesize,
.editableTableContainer .editabletable_insert_btn,
.autocompleteControl .select2-container--default,
.pagingTableContainer .tablesorter-filter-row .tablesorter-filter,
.fileUploadControl .button,
#calendarDiv input.cpMonthNavigation, #calendarDiv input.cpYearNavigation,
.sliderControl .controlBody
{
    background: none; /* Override dojo gradients */
    background-color: $defaultControlBgColour;
}

/* **************************************************************************************************************************** */
/* PRIMITIVE CONTROLS - CONTROL-SPECIFIC SPECIALISATION                                                                         */
/* **************************************************************************************************************************** */

.pageHeadingControl .output, .sectionHeadingControl .output, .subHeadingControl .output, .taglineControl .output {
    display : inline-block;
}
.pageHeadingControl .output {
    font-size: $pageHeadingFontSize;
    letter-spacing : 0.2em;
    color : $panelHeaderTextColour;
}
.sectionHeadingControl .output {
    font-size: $sectionHeadingFontSize;
    color : $panelHeaderTextColour;
}
.subHeadingControl .output {
    font-size: $subHeadingFontSize;
    color : $panelHeaderTextColour;
}
.taglineControl .output {
    font-size: $labelFontSize;
    color : $emphasisColour;
}

.bodyTextControl .output {
    font-size: $bodyFontSize;
}

.selectControl .select[size] {
    height : auto;
}

.hyperlinkControl .button, .editableTableContainer .editabletable_insert_btn, #calendarDiv .cpSelectBtn {
    display:inline-block;
}

.buttonControl .button, .hyperlinkControl .button, .editableTableContainer .editabletable_insert_btn, #calendarDiv .cpSelectBtn, .fileUploadControl .button {
    color: $buttonTextColour;
    background-color: $buttonBgColour;
    background-image : linear-gradient(to bottom, $gradientStartColour 0%, $gradientEndColour 90%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#33000000',GradientType=0 ); /* IE6-9 */
    border: 1px solid $buttonBorderColour;
    text-decoration:none;
    cursor: pointer;
}
.buttonControl .button:hover, .hyperlinkControl .button:hover, .editableTableContainer .editabletable_insert_btn:hover, #calendarDiv .cpSelectBtn:hover, .fileUploadControl .button:hover {
    background-color: $buttonHoverBgColour;
    border-color: $buttonBorderColour;

}
.buttonControl .button:active, .hyperlinkControl .button:active, .editableTableContainer .editabletable_insert_btn:active, #calendarDiv .cpSelectBtn:active, .fileUploadControl .button:active {
    background-color: $buttonActiveBgColour;
    border-color: $defaultBorderColour;
    background-image: linear-gradient(to bottom, $gradientStartColour 0%, $gradientEndColour 90%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#80000000', endColorstr='#33000000',GradientType=0 ); /* IE6-9 */
}

.buttonControl .button.secondaryActionButton, .hyperlinkControl .button.secondaryActionButton {
    color: $buttonSecondaryTextColour;
    background-color: $buttonSecondaryBgColour;
    border: 1px solid $buttonBorderColour;
}
.buttonControl .button.secondaryActionButton:hover, .hyperlinkControl .button.secondaryActionButton:hover {
    background-color: $buttonSecondaryHoverBgColour;
    border-color: $buttonBorderColour;
}
.buttonControl .button.secondaryActionButton:active, .hyperlinkControl .button.secondaryActionButton:active {
    background-color: $buttonSecondaryActiveBgColour;
    border-color: $buttonBorderColour;
}

.buttonControl .button.jumbo-button  {
    font-size: $pageHeadingFontSize;
    padding: 12px 60px 12px 60px;
}

.hyperlinkControl .hyperlink,
.paragraph a {
    text-decoration:none;
    color: $anchorColour;
}

.hyperlinkControl .hyperlink:hover,
.paragraph a:hover {
    color: $anchorHoverTextColour;
}

/* Set a default size for textareas */
.textareaControl .textbox {
    width: 30em;
    height: 8em;
    overflow : auto;
}

.numberControl input.dijitInputInner,
.currencyControl input.dijitInputInner,
.spinnerControl input.dijitInputInner {
    text-align: right;
}

.filteringSelectControl .dijitComboBox .dijitButtonNode
{
    background: $defaultPanelColour;
}

/* .filteringSelectControl pop-up background */
.dijitMenu.dijitComboBoxMenu {
    background: $defaultControlBgColour;
    border: 1px solid $defaultBorderColour;
}

/* filtering select */
.dijitPopup {
    position: absolute;
}

.dijitMenu.dijitComboBoxMenu .dijitMenuItem{
    padding: 0px 4px 2px 4px;
}


.dijitInputInner {
    border: 0 !important;
    background-color: transparent !important;
    width: 100% !important;
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: 0 !important;
    margin-right: 0 !important;
}

.dijitInputContainer {
    position : relative;
}

.filteringSelectControl .dijitArrowButtonInner {
    visibility : hidden;
    width : 0;
    border : none;
}

.filteringSelectControl .dijitArrowButton {
    width: 10px;
    cursor: pointer;
    color: $defaultTextColour;
    margin: 0px;
    padding : 1px 2px 1px 3px;
    float : right;
}
.filteringSelectControl .dijitInputContainer {
    margin-right : 15px; /*allow space for arrow */
}


.filteringSelectControl .dijitArrowButton::before {
    font-family:'FontAwesome';
    content:"\f107";
    font-size: $smallFontIconSize;
}

.spinnerControl .dijitInputContainer {
    margin-right : 15px; /*allow space for arrow buttons */
}
.spinnerControl .dijitArrowButtonInner,
.spinnerControl .dijitSpinnerButtonInner{
    display:none;
}



.spinnerControl .dijitSpinnerButtonContainer {
    float:right;
    background: $defaultPanelColour;
    padding: 5px 4px 4px 4px;
}

.spinnerControl .dijitUpArrowButton,
.spinnerControl .dijitDownArrowButton {
    font-size: $smallFontIconSize;
    display : block;
    height : 50%;
    width: 10px;
    cursor: pointer;
    color: $defaultTextColour;

}

.spinnerControl .dijitUpArrowButton::before {
    font-family:'FontAwesome';
    content:"\f106";
}
.spinnerControl .dijitDownArrowButton::before {
    font-family:'FontAwesome';
    content:"\f107";
}

.splitDateControl .textbox {
    margin-left : 5px;
    margin-right : 5px;
}
.splitDateControl .textbox:first-child {
    margin-left : 0;
}

.datePickerIcon, .timePickerIcon {
    text-decoration:none;
    margin-left:8px;
    margin-right:8px;
    display : inline-block;
}

.datePickerIcon:before {
    font-family:'FontAwesome';
    content:"\f073";
    font-size: $largeFontIconSize;
    color: $anchorColour;
}
.timePickerIcon:before {
    font-family:'FontAwesome';
    content:"\f017";
    font-size: $largeFontIconSize;
    color: $anchorColour;
}

/* Top level container for the in page calendar */
#calendarDiv
{
    position : absolute;
    padding: 0px;
    background : $defaultPanelColour;
    z-index: 2500;
}

/* IGNORE - Main containers for the calendar table - quite messy */
#calendarDiv .cpBorder > tbody > tr > td
{
    border: none;
}

#calendarDiv .cpBorder
{
    border: 1px solid $defaultBorderColour;
    border-radius: $smallBorderRadius;
}

/* Month, year navigator */
#calendarDiv table table
{
    width: 100%;
    min-width: 250px; /* Allow for long month name */
}

#calendarDiv .cpYearNavigation, #calendarDiv .cpMonthNavigation
{
    background-color: $defaultPanelColour;
    text-align: center;
    vertical-align: middle;
    text-decoration: none;
    color: $defaultTextColour;
    padding: 5px 3px 5px 3px;
}

#calendarDiv td.cpDayColumnHeader
{
    color: $defaultTextColour;
    background-color: $defaultPanelColour;
    text-align: center;
    border: 1px solid $defaultBorderColour;
    border-left: none;
    border-right: none;
    padding-top: 5px;
}

/* These styles apply to the containing TD and the contained A. The calendar assigns the same class name to the TD and the A */
#calendarDiv .cpCurrentMonthDate, #calendarDiv .cpCurrentDate, #calendarDiv .cpOtherMonthDate
{
    height: 20px;
    color: $defaultTextColour;
    background-color: $defaultPanelColour;
    text-align: center;
    text-decoration: none;
}
#calendarDiv .cpCurrentMonthDate:hover, #calendarDiv .cpOtherMonthDate:hover,
#calendarDiv .cpCurrentMonthDate:hover .cpCurrentMonthDate,
#calendarDiv .cpOtherMonthDate:hover .cpOtherMonthDate,
#calendarDiv .cpTodayTextContainer .cpTodayText:hover,
#calendarDiv .cpNowTextContainer .cpNowText:hover
{
    color: $buttonTextColour;
    background-color: $buttonBgColour;
}

#calendarDiv .cpCurrentDate:hover, #calendarDiv .cpCurrentDate:hover .cpCurrentDate {
    background-color: $buttonHoverBgColour;
}

#calendarDiv .cpCurrentDate
{
    color: $buttonTextColour;
    background-color: $buttonBgColour;
}

#calendarDiv .cpOtherMonthDate
{
    color: $defaultTextColour;
    background-color: $defaultControlBgColour;
}

#calendarDiv .cpType-date .cpTodayTextContainer
{
    background-color: $panelHeaderColour;
    color: $panelHeaderTextColour;
    border-top: 1px solid $defaultBorderColour;
    padding: 5px 0px 5px 0px;
}
#calendarDiv .cpType-datetime .cpTodayTextContainer,
#calendarDiv .cpNowTextContainer
{
    float:left;
    padding : 5px;
}
#calendarDiv .cpTodayTextContainer .cpTodayText,
#calendarDiv .cpNowTextContainer .cpNowText
{
    text-decoration: none;
    color: $defaultTextColour;
}

#calendarDiv .cpType-datetime .cpTodayTextContainer .cpTodayText,
#calendarDiv .cpNowTextContainer .cpNowText
{
    padding: 3px 0px;
    display: inline-block;
}

#calendarDiv .cpCurrentMonthDateDisabled, #calendarDiv .cpOtherMonthDateDisabled, #calendarDiv .cpCurrentDateDisabled
{
    color: $disabledTextColour;
    text-decoration: line-through;
}

#calendarDiv .cpTodayTextDisabled
{
    text-decoration: line-through;
    color: $disabledTextColour;
}

#calendarDiv .cpType-datetime .cpTimeEntry
{
    border-top: 1px solid $defaultBorderColour;
    padding: 5px;
    text-align: center;
    white-space: nowrap;
}

#calendarDiv .cpType-datetime .cpTimeLabel
{
    display : inline-block;
    margin : 5px 5px 0 0;
}

#calendarDiv .cpType-time .cpTimeLabel
{
    display: block;
    background-color: $defaultPanelColour;
    padding : 5px;
    color : $defaultTextColour;
    text-align : center;
}

#calendarDiv .cpTimeControls
{
    white-space: nowrap;
}

#calendarDiv .cpType-time .cpTimeControls
{
    padding: 10px 5px 5px 5px;
    text-align: center;
    display : block;
}
#calendarDiv .cpTimeControls select
{
    margin: auto 5px;
}


#calendarDiv .cpSelectBtnContainer
{
    float:right;
    padding : 5px;
}
#calendarDiv .cpSelectBtn
{
    padding: 3px 6px;
}

/* Hide the standard browser control so that only our stylised parts of the control are visible. */
.fileUploadControl .fileUpload
{
    display : none;
}
.fileUploadControl .dragArea
{
    min-width : 200px;
    min-height : 150px;
    overflow : auto;
    border-style : dashed;
}

.fileUploadControl .dragArea.dragActive
{
    background : $defaultPanelColour;
}

/* Fonticon control */
.fontIconControl .controlBody .fontIcon {
    font-size: $largeFontIconSize;
    font-style:normal;
    color: $defaultFontIconColour;
    display : inline-block;
}
.fontIconControl .controlBody .fontIcon.small-icon {
    font-size: $smallFontIconSize;
}
.fontIconControl .controlBody .fontIcon.medium-icon {
    font-size: $mediumFontIconSize;
}
.fontIconControl .controlBody .fontIcon.xlarge-icon {
    font-size: $xLargeFontIconSize;
}
.fontIconControl .controlBody .fontIcon.jumbo-icon {
    font-size: $jumboFontIconSize;
}
.fontIconControl .controlBody .fontIcon[onclick] {
    cursor : pointer
}
.fontIconControl .controlBody .fontIcon:before{
    font-family:'FontAwesome';
}

/** Default styling for number slider controls */
.sliderControl {

    .controlBody > * {
        vertical-align: middle;
    }

    input.slider[type=range] {
        -webkit-appearance: none;
        background : transparent;
        height: 18px;

        &::-moz-range-track {
            height: 3px;
            background: $defaultControlBgColour;
            border: none;
            border-radius: 3px;
        }
        &::-moz-range-thumb {
            border: none;
            height: 16px;
            width: 2px;
            border-radius: 50%;
            background: $buttonBgColour;
        }
        &::-webkit-slider-runnable-track {
            height: 3px;
            background: $defaultControlBgColour;
            border: none;
            border-radius: 3px;
        }
        &::-webkit-slider-thumb {
            -webkit-appearance: none;
            margin-top: -6px;
            border: none;
            height: 16px;
            width: 2px;
            border-radius: 50%;
            background: $buttonBgColour;
        }
        &::-ms-track {
            height: 3px;
            background: $defaultControlBgColour;
            border: none;
            border-radius: 3px;

            /*leave room for the larger thumb to overflow with a transparent border */
            /* border-color: transparent;
            border-width: 6px 0; */

            /*remove default tick marks*/
            color: transparent;
        }
        &:focus {
            outline: none;
        }
        &::-moz-focus-outer {
            border: 0;
        }

    }

    /** this is the output display of the selected number from the slider. */
    .output {
        display: inline-block;
        min-width: 30px;
    }
}

/* **************************************************************************************************************************** */
/* MANDATORY MARKERS, PLACEHOLDER ICONS, ACTIVE FIELD INDICATORS and general TRANSITIONS.                                       */
/* **************************************************************************************************************************** */
/*
 * Additional styles to handle the generic mandatory and errorIcon indicators. Also provides input indicator and transitions for input content.
 */


.controlBody.hasPlaceholder,
.controlBody.hasFeedback,
.controlBody.isMandatory {
    position: relative;
}

/* Mandatory field marker. */
.controlBody.isMandatory .mandatory {
    width: 0;
    height: 0;
    border-top: 10px solid $defaultBorderColour;
    border-left: 10px solid transparent;
    top: 1px;
    right: 1px;
    position: absolute;
    color: transparent;
}

/* Adjust the mandatory marker position slightly for controls where the border is on the controlBody*/
.checkboxControl .controlBody.isMandatory .mandatory, .multiCheckboxControl .controlBody.isMandatory .mandatory,
.radioControl .controlBody.isMandatory .mandatory, .switchControl .controlBody.isMandatory .mandatory,
.splitDateControl .controlBody.isMandatory .mandatory, .fileUploadControl .controlBody.isMandatory .mandatory,
.sliderControl .controlBody.isMandatory .mandatory
{
    top:0px;
    right:0px;
}
/* Move the manadatory marker for date controls to the left of the calendar icon */
.dateControl .controlBody.isMandatory .mandatory {
    right:33px;
}



/* Validation error, etc. */

/* border colour if validation success. */
.textboxControl .hasFeedback.hasSuccess .textbox, .dateControl .hasFeedback.hasSuccess .textbox, .splitDateControl .hasFeedback.hasSuccess .textbox,
.textareaControl .hasFeedback.hasSuccess .textbox,
.selectControl .hasFeedback.hasSuccess .select, .multiSelectControl .hasFeedback.hasSuccess .select, .secretControl .hasFeedback.hasSuccess .textbox,
.filteringSelectControl .hasFeedback.hasSuccess .dijitTextBox, .spinnerControl .hasFeedback.hasSuccess .dijitTextBox,
.currencyControl .hasFeedback.hasSuccess .dijitTextBox, .numberControl .hasFeedback.hasSuccess .dijitTextBox,
.autocompleteControl .hasFeedback.hasSuccess .select2-container,
.sliderControl .hasFeedback.hasSuccess {
    /*border-color: $successColour;*/
}

/* border colour if validation error. */
.textboxControl .hasFeedback.hasError .textbox, .dateControl .hasFeedback.hasError .textbox, .splitDateControl .hasFeedback.hasError .textbox,
.textareaControl .hasFeedback.hasError .textbox,
.selectControl .hasFeedback.hasError .select, .multiSelectControl .hasFeedback.hasError .select, .secretControl .hasFeedback.hasError .textbox,
.filteringSelectControl .hasFeedback.hasError .dijitTextBox, .spinnerControl .hasFeedback.hasError .dijitTextBox,
.currencyControl .hasFeedback.hasError .dijitTextBox, .numberControl .hasFeedback.hasError .dijitTextBox,
.autocompleteControl .hasFeedback.hasError .select2-container,
.sliderControl .hasFeedback.hasError {
    /*border-color: $errorColour;*/
}
/* For radio and multi check controls we change the option text color rather than the border. */
.multiCheckboxControl .hasFeedback.hasSuccess .checkbox, .radioControl .hasFeedback.hasSuccess .radio, .fileUploadControl .hasFeedback.hasSuccess .output {
    /*color: $successColour;*/
}
.multiCheckboxControl .hasFeedback.hasError .checkbox, .radioControl .hasFeedback.hasError .radio, .fileUploadControl .hasFeedback.hasError .output{
    /*color: $errorColour;*/
}
/* Specific validation border handling for the rich text editor */
.richTextEditorControl .hasFeedback.hasSuccess .mceEditor {
    /*display : inline-block;
    border : 1px solid $successColour;*/
}
.richTextEditorControl .hasFeedback.hasError .mceEditor {
    /*display : inline-block;
    border : 1px solid $errorColour;*/
}

/** Also change label colours based on associated field validation */
.labelControl.hasSuccess .label {
    /*color: $successColour;*/
}
.labelControl.hasError .label {
    /*color: $errorColour;*/
}


/*.hasFeedback .feedbackIcon {
    position:absolute;
    right : 5px;
    top : 8px;
    height : 17px;
    width : 17px;
    font-family:'FontAwesome';
    font-style:normal;
    font-size : $mediumFontIconSize;
}*/

/* Feedback icon position overrides as requried for specific controls. */
/*.checkboxControl .hasFeedback .feedbackIcon {
    top : 5px;
    right : 0px;
}
.radioControl .hasFeedback .feedbackIcon,
.multiCheckboxControl .hasFeedback .feedbackIcon,
.switchControl .hasFeedback .feedbackIcon,
.fileUploadControl .hasFeedback .feedbackIcon {
    top : 8px;
    right : 0px;
}
.richTextEditorControl .hasFeedback .feedbackIcon {
    top : 60px;
}
.dateControl .hasFeedback .feedbackIcon {
    right : 35px;
}
.splitDateControl .hasFeedback .feedbackIcon {
    right : 0;
    top : 8px;
}
.selectControl .hasFeedback .feedbackIcon, .multiSelectControl .hasFeedback .feedbackIcon {
    right : 20px;
    right:5px\0; */ /*IE8+ override due to it applying padding to the right of dropdown arrow*/ /*
}
.filteringSelectControl .hasFeedback .feedbackIcon, .spinnerControl .hasFeedback .feedbackIcon {
    right : 20px;
}
.splitDateControl .controlBody.hasFeedback {
    padding-right : 25px;
}*/



/* If the control also has a placeholder on the right, then we need to further adjust the feedback icon position */
/*.hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon {
    right : 30px;
}*/
/* Feedback icon position overrides as requried for specific controls when placeholder on the right. */
/*.radioControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon, .checkboxControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon,
.multiCheckboxControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon {
    right : 30px;
}
.switchControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon {
    right : 30px;
}
.dateControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon {
    right : 60px;
}

.selectControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon, .multiSelectControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon {
    right : 45px;
    right:29px\0; */ /*IE8+ override due to it applying padding to the right of dropdown arrow*/ /*
}
.filteringSelectControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon, .spinnerControl .hasPlaceholder.placeholderRight.hasFeedback .feedbackIcon {
    right : 45px;
}*/

/*
.feedbackIcon.fiSuccess:before {
    content: "\f00c";
    color : $successColour;
}
.feedbackIcon.fiError:before {
    content: "\f00d";
    color : $errorColour;
}*/

.feedbackIcon.fiError {
    width: 0;
    height: 0;
    border-top: 10px solid $errorColour;
    border-left: 10px solid transparent;
    top: 1px;
    right: 1px;
    position: absolute;
    background: none;
    padding: 0px;
}
/** Correctly position error marker for controls that have the border on controlBody. */
.checkboxControl .hasFeedback.hasError .feedbackIcon.fiError, .multiCheckboxControl .hasFeedback.hasError .feedbackIcon.fiError,
.radioControl .hasFeedback.hasError .feedbackIcon.fiError, .switchControl .hasFeedback.hasError .feedbackIcon.fiError,
.splitDateControl .hasFeedback.hasError .feedbackIcon.fiError, .fileUploadControl .hasFeedback.hasError .feedbackIcon.fiError,
.sliderControl .hasFeedback.hasError .feedbackIcon.fiError
{
    top:0px;
    right:0px;
}
.dateControl .hasFeedback.hasError .feedbackIcon.fiError {
    right:33px;
}



/* Field level error message text */
.textboxControl .errorMessage, .dateControl .errorMessage, .splitDateControl .errorMessage, .textareaControl .errorMessage,
.selectControl .errorMessage, .multiSelectControl .errorMessage, .secretControl .errorMessage,
.radioControl .errorMessage, .checkboxControl .errorMessage, .multiCheckboxControl .errorMessage,
.filteringSelectControl .errorMessage, .spinnerControl .errorMessage,
.currencyControl .errorMessage, .numberControl .errorMessage,
.richTextEditorControl .errorMessage, .switchControl .errorMessage,
.autocompleteControl .errorMessage, .sliderControl .errorMessage
{
    display : block;
    color : $errorColour;
    padding : 5px 0px 10px;
    font-family: $defaultFontFamily;
}



/* Placeholder Icons */

.controlBody .placeholderIcon {
    position:absolute;
    margin: 11px 8px;
    /*padding-top:3px;*/
    left:0px;
    top : 0px;
    /*opacity : 0.7;*/
    pointer-events:none;
}

/*.radioControl .controlBody .placeholderIcon, .multiCheckboxControl .controlBody .placeholderIcon, .checkboxControl .controlBody .placeholderIcon {
    top:-3px;
}*/

.selectControl .controlBody.placeholderRight .placeholderIcon, .multiSelectControl .controlBody.placeholderRight .placeholderIcon {
    right:15px;
    right:0px\0; /* IE8+ override due to it applying padding to the right of dropdown arrow */
}
.filteringSelectControl .controlBody.placeholderRight .placeholderIcon, .spinnerControl .controlBody.placeholderRight .placeholderIcon {
    right:15px;
}

.switchControl .controlBody .placeholderIcon {
    top:0px;
}

.controlBody.placeholderRight .placeholderIcon {
    left:auto;
    right:0px;
}

.dateControl .controlBody.placeholderRight .placeholderIcon {
    right:34px;
}

.controlBody .placeholderIcon:before {
    font-family:'FontAwesome';
    font-size: $mediumFontIconSize;
    font-style:normal;
    color: $defaultFontIconColour;
    pointer-events:none;
}
.controlBody .placeholderIcon.large-icon::before {
    font-size: $xLargeFontIconSize;
}
.controlBody .placeholderIcon.jumbo-icon::before {
    font-size: $jumboFontIconSize;
}

.controlBody .placeholderIcon.defaultIcon:before {
    content:"\f0d0";
}

/* Adjust the placeholder icon colour for buttons as required. */
.buttonControl .controlBody .placeholderIcon:before, .hyperlinkControl .controlBody .button ~ .placeholderIcon:before, .fileUploadControl .controlBody .placeholderIcon:before {
    color: $buttonTextColour;
}
.fileUploadControl .controlBody.placeholderRight .placeholderIcon:before {
    color: $defaultTextColour;
}
.buttonControl .controlBody .button.secondaryActionButton ~ .placeholderIcon:before, .hyperlinkControl .controlBody .button.secondaryActionButton ~ .placeholderIcon:before {
    color: $defaultTextColour;
}

.textboxControl .hasPlaceholder .textbox, .dateControl .hasPlaceholder .textbox, .splitDateControl .controlBody.hasPlaceholder, .textareaControl .hasPlaceholder .textbox,
.secretControl .hasPlaceholder .textbox, .currencyControl .hasPlaceholder .dijitTextBox, .numberControl .hasPlaceholder .dijitTextBox,
.buttonControl .hasPlaceholder .button, .hyperlinkControl .hasPlaceholder .button, .hyperlinkControl .hasPlaceholder .hyperlink,
.outputControl .hasPlaceholder .output, .fontIconControl .hasPlaceholder .fontIcon, .radioControl .hasPlaceholder, .filteringSelectControl .hasPlaceholder .dijitInputField,
.checkboxControl .hasPlaceholder, .switchControl .hasPlaceholder, .multiCheckboxControl .hasPlaceholder, .spinnerControl .hasPlaceholder .dijitInputField,
.autocompleteControl .hasPlaceholder .select2-container--default, .fileUploadControl .hasPlaceholder .button, .sliderControl .hasPlaceholder
{
    padding-left: 34px; /*allow for the icon*/
}
.selectControl .hasPlaceholder .select, .multiSelectControl .hasPlaceholder .select {
    padding-left: 29px; /*allow for the icon*/
}

.spinnerControl .hasPlaceholder .dijitSpinner {
    min-width:105px;
}


.textboxControl .placeholderRight .textbox, .dateControl .placeholderRight .textbox, .textareaControl .placeholderRight .textbox,
.secretControl .placeholderRight .textbox, .currencyControl .placeholderRight .dijitTextBox, .numberControl .placeholderRight .dijitTextBox,
.buttonControl .placeholderRight .button, .hyperlinkControl .placeholderRight .button,
.spinnerControl .placeholderRight .dijitInputField, .filteringSelectControl .placeholderRight .dijitInputField,
.autocompleteControl .placeholderRight .select2-container--default {
    padding-left: 10px;
    padding-right: 34px;
}


.radioControl .placeholderRight, .checkboxControl .placeholderRight, .multiCheckboxControl .placeholderRight, .switchControl .placeholderRight,
.outputControl .placeholderRight .output, .fontIconControl .placeholderRight .fontIcon, .hyperlinkControl .placeholderRight .hyperlink,
.splitDateControl .controlBody.placeholderRight, .sliderControl .placeholderRight {
    padding-left: 10px;
    padding-right: 34px;
}

.selectControl .placeholderRight .select, .multiSelectControl .placeholderRight .select {
    padding-left: 7px;
    padding-right: 34px;
}


.fileUploadControl .hasPlaceholder.placeholderRight .output
{
    padding-right: 27px; /*allow for the placeholder icon on the right */
}
.fileUploadControl .hasFeedback.hasPlaceholder.placeholderRight .output
{
    padding-right: 34px; /*allow for the placeholder and feedback icons on the right */
}
.fileUploadControl .hasPlaceholder.placeholderRight .button
{
    padding-left : 12px; /*reset the padding on the button as the icon is now on the output. */
}


/* Active Field highlighting for input-type fields */
.textboxControl .textbox:focus, .dateControl .textbox:focus, .splitDateControl .textbox:focus, .textareaControl .textbox:focus,
.selectControl .select:focus, .multiSelectControl .select:focus, .secretControl .textbox:focus,
.switchControl .checkbox:focus + label:before,
.filteringSelectControl .dijitTextBoxFocused, .spinnerControl .dijitTextBoxFocused,
.currencyControl .dijitTextBoxFocused, .numberControl .dijitTextBoxFocused,
.pagingTableContainer .tablesorter-filter-row .tablesorter-filter:focus,
.autocompleteControl .select2-container--focus {
    border-left-width : 5px;
    padding-left : 6px;
    outline : none;
}

/* filtering select and spinner controls have their padding on a child element, so adjust accordingly. */
.filteringSelectControl .dijitTextBoxFocused {
    padding-left : 0px
}
.filteringSelectControl .dijitTextBoxFocused .dijitInputField  {
    padding-left : 6px
}

/** select controls have less left padding initially. */
.selectControl .select:focus, .multiSelectControl .select:focus {
    padding-left : 3px;
}

/* If we have a left placeholder icon then there will be more padding, so adjust the new values accordingly */
.textboxControl .hasPlaceholder .textbox:focus, .dateControl .hasPlaceholder .textbox:focus, .splitDateControl .hasPlaceholder .textbox:focus,
.textareaControl .hasPlaceholder .textbox:focus, .secretControl .hasPlaceholder .textbox:focus,
.switchControl .hasPlaceholder .checkbox:focus + label:before,
.currencyControl .hasPlaceholder .dijitTextBoxFocused, .numberControl .hasPlaceholder .dijitTextBoxFocused,
.autocompleteControl .hasPlaceholder .select2-container--focus {
    padding-left : 30px
}
/* filtering select and spinner controls have their padding on a child element, so adjust accordingly. */
.filteringSelectControl .hasPlaceholder .dijitTextBoxFocused .dijitInputField  {
    padding-left : 30px
}
/** select controls have less left padding initially. */
.selectControl .hasPlaceholder .select:focus, .multiSelectControl .hasPlaceholder .select:focus {
    padding-left : 25px;
}

/* If the placeholder icon is on the right then make sure the above overrides dont apply */
.textboxControl .hasPlaceholder.placeholderRight .textbox:focus, .dateControl .hasPlaceholder.placeholderRight .textbox:focus, .splitDateControl .hasPlaceholder.placeholderRight .textbox:focus,
.textareaControl .hasPlaceholder.placeholderRight .textbox:focus, .secretControl .hasPlaceholder.placeholderRight .textbox:focus,
.switchControl .hasPlaceholder.placeholderRight .checkbox:focus + label:before,
.currencyControl .hasPlaceholder.placeholderRight .dijitTextBoxFocused, .numberControl .hasPlaceholder.placeholderRight .dijitTextBoxFocused,
.autocompleteControl .hasPlaceholder.placeholderRight .select2-container--focus {
    padding-left : 6px
}
/* filtering select and spinner controls have their padding on a child element, so adjust accordingly. */
.filteringSelectControl .hasPlaceholder.placeholderRight .dijitTextBoxFocused .dijitInputField  {
    padding-left : 6px
}
/** select controls have less left padding initially. */
.selectControl .hasPlaceholder.placeholderRight .select:focus, .multiSelectControl .hasPlaceholder.placeholderRight .select:focus {
    padding-left : 3px;
}


.buttonControl .button:focus, .hyperlinkControl .button:focus, .fileUploadControl .button:focus, .dijitTextBox input:focus {
    outline : none;
}

/* active field with success */
.textboxControl .hasFeedback.hasSuccess .textbox:focus, .dateControl .hasFeedback.hasSuccess .textbox:focus, .splitDateControl .hasFeedback.hasSuccess .textbox:focus, .textareaControl .hasFeedback.hasSuccess .textbox:focus,
.selectControl .hasFeedback.hasSuccess .select:focus, .multiSelectControl .hasFeedback.hasSuccess .select:focus, .secretControl .hasFeedback.hasSuccess .textbox:focus,
.filteringSelectControl .hasFeedback.hasSuccess .dijitTextBoxFocused, .spinnerControl .hasFeedback.hasSuccess .dijitTextBoxFocused,
.currencyControl .hasFeedback.hasSuccess .dijitTextBoxFocused, .numberControl .hasFeedback.hasSuccess .dijitTextBoxFocused,
.autocompleteControl .hasFeedback.hasSuccess .select2-container--focus {
    /*border-color: $successColour;
    box-shadow: 0 0 6px $successColour;*/
}

/* active field with error */
.textboxControl .hasFeedback.hasError .textbox:focus, .dateControl .hasFeedback.hasError .textbox:focus, .splitDateControl .hasFeedback.hasError .textbox:focus, .textareaControl .hasFeedback.hasError .textbox:focus,
.selectControl .hasFeedback.hasError .select:focus, .multiSelectControl .hasFeedback.hasError .select:focus, .secretControl .hasFeedback.hasError .textbox:focus,
.filteringSelectControl .hasFeedback.hasError .dijitTextBoxFocused, .spinnerControl .hasFeedback.hasError .dijitTextBoxFocused,
.currencyControl .hasFeedback.hasError .dijitTextBoxFocused, .numberControl .hasFeedback.hasError .dijitTextBoxFocused,
.autocompleteControl .hasFeedback.hasError .select2-container--focus {
    /*border-color: $errorColour;
    box-shadow: 0 0 6px $errorColour;*/
}

/* hover field styling */
.textboxControl .textbox:hover, .dateControl .textbox:hover, .splitDateControl .controlBody:hover, .textareaControl .textbox:hover,
.selectControl .select:hover, .multiSelectControl .select:hover, .secretControl .textbox:hover,
.checkboxControl .controlBody:hover, .switchControl .controlBody:hover, .multiCheckboxControl .controlBody:hover, .radioControl .controlBody:hover,
.filteringSelectControl .dijitHover, .spinnerControl .dijitHover,
.currencyControl .dijitHover, .numberControl .dijitHover, .sliderControl .controlBody:hover,
.pagingTableContainer .tablesorter-filter-row .tablesorter-filter:hover, .pagingTableContainer .tablesorterPager .pagesize:hover,
.autocompleteControl .select2-container:hover, .fileUploadControl .controlBody:hover
{
    border-color: $buttonBorderColour;
    background-color: $backgroundColour;
    opacity: 1.0;
}

/* hover field with success */
.textboxControl .hasFeedback.hasSuccess .textbox:hover, .dateControl .hasFeedback.hasSuccess .textbox:hover, .splitDateControl .hasFeedback.hasSuccess .textbox:hover, .textareaControl .hasFeedback.hasSuccess .textbox:hover,
.selectControl .hasFeedback.hasSuccess .select:hover, .multiSelectControl .hasFeedback.hasSuccess .select:hover, .secretControl .hasFeedback.hasSuccess .textbox:hover,
.filteringSelectControl .hasFeedback.hasSuccess .dijitHover, .spinnerControl .hasFeedback.hasSuccess .dijitHover,
.currencyControl .hasFeedback.hasSuccess .dijitHover, .numberControl .hasFeedback.hasSuccess .dijitHover,
.autocompleteControl .hasFeedback.hasSuccess .select2-container:hover {
    /*border-color: $successColour;
    box-shadow: 0 0 6px $successColour;*/
}

/* hover field with error */
.textboxControl .hasFeedback.hasError .textbox:hover, .dateControl .hasFeedback.hasError .textbox:hover, .splitDateControl .hasFeedback.hasError .textbox:hover, .textareaControl .hasFeedback.hasError .textbox:hover,
.selectControl .hasFeedback.hasError .select:hover, .multiSelectControl .hasFeedback.hasError .select:hover, .secretControl .hasFeedback.hasError .textbox:hover,
.filteringSelectControl .hasFeedback.hasError .dijitHover, .spinnerControl .hasFeedback.hasError .dijitHover,
.currencyControl .hasFeedback.hasError .dijitHover, .numberControl .hasFeedback.hasError .dijitHover,
.autocompleteControl .hasFeedback.hasError .select2-container:hover {
    /*border-color: $errorColour;
    box-shadow: 0 0 6px $errorColour;*/
}


/* **************************************************************************************************************************** */
/* COMPOSITE CONTROLS - Container groups, tables, etc.                                                                          */
/* **************************************************************************************************************************** */
/* Paging Table Control - Sort Icons on the Header */

.pagingTableContainer .tablesorter-header {
    cursor: pointer;
}

.pagingTableContainer .tablesorter-header .label:before {
    font-family:'FontAwesome';
    padding-right : 5px;
    display:inline-block;
    content:"\f0dc";
}

.pagingTableContainer .tablesorter-header.headerSortUp .label:before {
    content:"\f0de";
}

.pagingTableContainer .tablesorter-header.headerSortDown .label:before
{
    content:"\f0dd";
}

.pagingTableContainer .tablesorter .filtered {
    display:none;
}

.pagingTableContainer .tablesorter-filter.disabled {
    display:none;
}

/* Paging Icons on the Footer */

.pagingTableContainer .tablesorterPager
{
    background-image: none;
    padding: 0.3em 0em 0.3em 0em;
    text-align: center;
    width: 100%;
}

.pagingTableContainer .tablesorterPager .first,
.pagingTableContainer .tablesorterPager .prev,
.pagingTableContainer .tablesorterPager .next,
.pagingTableContainer .tablesorterPager .last
{
    display: inline-block;
    height : 24px;
    width : 24px;
    cursor : pointer;
}

.pagingTableContainer .tablesorterPager .next:before,
.pagingTableContainer .tablesorterPager .prev:before,
.pagingTableContainer .tablesorterPager .first:before,
.pagingTableContainer .tablesorterPager .last:before {
    font-family:'FontAwesome';
    font-size: $mediumFontIconSize;
    color: $defaultTextColour;
    display:inline-block;
}

.pagingTableContainer .tablesorterPager .next:before
{
    content:"\f04b";
}

.pagingTableContainer .tablesorterPager .prev:before
{
    content:"\f04b";
    -webkit-transform: scale(-1, 1);
    -ms-transform: scale(-1, 1);
    transform: scale(-1, 1);
}

.pagingTableContainer .tablesorterPager .first:before
{
    content:"\f048";
}

.pagingTableContainer .tablesorterPager .last:before
{
    content:"\f051";
}

.pagingTableContainer .tablesorterPager .pagedisplay
{
    padding-right : 12px;
    text-align : center;
}
.pagingTableContainer .tablesorterPager .pagesize
{
    padding-right : 12px;
}

.pagingTableContainer .tablesorter-hasChildRow {
    cursor : pointer;
}

/* Paging table grouping header rows */
.pagingTableContainer tr.group-header td {
  background: $defaultPanelColour;
  height : 30px;
  padding-left : 3px;
  border-top: 1px solid $defaultBorderColour;
}
.pagingTableContainer .group-header .group-name {
  text-transform: uppercase;
  font-weight: bold;
  color : $defaultTextColour;
}
.pagingTableContainer .group-header .group-count {
  color: $defaultTextColour;
}
.pagingTableContainer .group-hidden {
  display: none;
}
.pagingTableContainer .group-header, .pagingTableContainer .group-header td {
  user-select: none;
  -moz-user-select: none;
}
/* collapsed arrow */
.pagingTableContainer tr.group-header td i:before {
    font-family:'FontAwesome';
    content:"\f0d7";
    font-size: $smallFontIconSize;
    color: $defaultTextColour;
    display:inline-block;
    padding: 0 5px;
    font-style : normal;
    width : 0.5em;
}
.pagingTableContainer tr.group-header.collapsed td i:before {
    content:"\f0da";
}


/* Accordion control */

.accordionContainer
{
    background: none !important;
    border: 1px solid $defaultBorderColour !important; /* !important required for dojo */
}

.accordionContainer .accordionPane
{
    background-color: $defaultPanelColour;
    border: 1px solid $defaultBorderColour;
    padding-bottom: 5px;
}

.accordionContainer .dijitAccordionTitle {
    display:block;
    color: $unselectedTextColour;
    background-color: $unselectedBackgroundColour;
    border-top-color: $defaultPanelColour;
    cursor: pointer;
}

.accordionContainer .dijitAccordionTitle.dijitAccordionTitleSelected
{
    color: $panelHeaderTextColour;
    background-color: $panelHeaderColour;
    border-top-color: $panelBorderColour;
    border-bottom: none;
    cursor: default;
}

.accordionContainer .dijitAccordionTitle:hover,
.accordionContainer .dijitAccordionTitle .dijitAccordionArrow:hover::before {
    color: $anchorHoverTextColour;
}

.accordionContainer .dijitAccordionTitle.dijitAccordionTitleSelected:hover,
.accordionContainer .dijitAccordionTitleSelected .dijitAccordionArrow:hover::before {
    color: $panelHeaderTextColour;
}

.accordionContainer .arrowTextUp, .accordionContainer .arrowTextDown {
    display:none;
}

.accordionContainer .dijitAccordionTitle .dijitAccordionArrow {
    background:none;
    height:auto;
}

.accordionContainer .dijitAccordionTitle .dijitAccordionArrow::before {
    font-family:'FontAwesome';
    content:"\f101";
    font-size: $mediumFontIconSize;
    color: $unselectedTextColour;
    display:inline-block;
}

.accordionContainer .dijitAccordionTitleSelected .dijitAccordionArrow::before {
    color: $defaultTextColour;
    content:"\f103";
}

/* Collapsible Content control */

.collapsibleSection .toggleLabelBackground {
    display:block;
    padding:0px;
}

.collapsibleSection .toggleLabelBackground .toggleHidden,
.collapsibleSection .toggleLabelBackground .toggleVisible
{
    color: $defaultTextColour; /* Required outside of other headings due to different markup */
    width: 100%;
}

.collapsibleSection .toggleLabelBackground .toggleVisible:before {
    font-family:'FontAwesome';
    content:"\f103";
    font-size: $mediumFontIconSize;
    color: $defaultTextColour;
    display:inline-block;
    padding: 0 5px;
}

.collapsibleSection .toggleLabelBackground .toggleHidden:before {
    font-family:'FontAwesome';
    content:"\f101";
    font-size: $mediumFontIconSize;
    color: $defaultTextColour;
    display:inline-block;
    padding: 0 5px;
}

.collapsibleSection .toggleLabelBackground .toggleHidden, .collapsibleSection .toggleLabelBackground .toggleVisible
{
    display: inline-block;
    text-decoration: none;
}

.collapsibleSection .collapsibleContent
{
    margin-top: 5px;
}

/* Editable Table Control */

.editableTableContainer table tr.editabletable_edit_row td.defaultBackground,
.editableTableContainer table tr.editabletable_edit_row:hover td.defaultBackground
{
    background : $defaultPanelColour;
}

.editableTableContainer table .editabletable_insert_row > td.defaultBackground
{
    border-top : 2px solid $defaultBorderColour;
}

.editableTableContainer .editabletable_btn_background,
.editableTableContainer .editabletable_insert_row .editabletable_insert_btn_background
{
    text-align: center;
    margin: 0px;
}
.editableTableContainer .editabletable_btn_background
{
    width: 28px; /*plus 6px padding either side gives 40px total */
}

.editableTableContainer th.editabletable_btn_heading
{
    width: 74px; /*80px minus the 3px padding either side */
}
.editableTableContainer th.editabletable_btn_heading[colspan="3"]
{
    width: 114px; /*120px minus 6px padding either side. */
}

/* The insert button doesnt get the controlBody wrapper that normal buttons get
 * so instead add the margin to it directly so that it will stil look aligned.
 * This is mainly for the scenario where the rest of the insert row is hidden.
 * Also added to the spans for display only mode, as again in this case the controlBody
 * is not present.  This ensures that the row doesnt get bigger when you switch to edit mode.*/
.editableTableContainer .editabletable_insert_btn,
.editableTableContainer .editabletable_display_row .output
{
    margin : 3px;
}

.editableTableContainer .editabletable_click_to_edit
{
    cursor : pointer;
}

.editableTableContainer .editabletable_edit_btn,
.editableTableContainer .editabletable_remove_btn,
.editableTableContainer .editabletable_accept_btn,
.editableTableContainer .editabletable_cancel_btn,
.editableTableContainer .editabletable_reorder_up_btn,
.editableTableContainer .editabletable_reorder_down_btn
{
    border : none;
    padding : 0;
    margin : 0em 0.5em 0em 0.5em;
    display : inline-block;
    height : 15px;
    width : 15px;
    text-decoration : none;
    overflow : hidden;
}

.editableTableContainer .editabletable_edit_btn SPAN,
.editableTableContainer .editabletable_remove_btn SPAN,
.editableTableContainer .editabletable_accept_btn SPAN,
.editableTableContainer .editabletable_cancel_btn SPAN,
.editableTableContainer .editabletable_reorder_up_btn SPAN,
.editableTableContainer .editabletable_reorder_down_btn SPAN
{
    visibility : hidden;
}

.editableTableContainer .editabletable_edit_btn:before,
.editableTableContainer .editabletable_remove_btn:before,
.editableTableContainer .editabletable_accept_btn:before,
.editableTableContainer .editabletable_cancel_btn:before,
.editableTableContainer .editabletable_reorder_up_btn:before,
.editableTableContainer .editabletable_reorder_down_btn:before {

    font-family:'FontAwesome';
    font-size: $mediumFontIconSize;
    color: $defaultFontIconColour;
}

.editableTableContainer .editabletable_edit_btn:before {
    content:"\f040";
}

.editableTableContainer .editabletable_remove_btn:before {
    content:"\f1f8";
}

.editableTableContainer .editabletable_accept_btn:before {
    content:"\f00c";
    color: $defaultFontIconColour;
}

.editableTableContainer .editabletable_cancel_btn:before {
    content:"\f00d";
    color: $defaultFontIconColour;
}

.editableTableContainer .editabletable_reorder_up_btn:before {
    content:"\f0d8";
    display:inline-block;
}

.editableTableContainer .editabletable_reorder_down_btn:before {
    content:"\f0d7";
    display:inline-block;
}

.editableTableContainer .editabletable_edit_btn:hover:before,
.editableTableContainer .editabletable_remove_btn:hover:before,
.editableTableContainer .editabletable_reorder_up_btn:hover:before,
.editableTableContainer .editabletable_reorder_down_btn:hover:before {
    color: $anchorHoverTextColour;
}
.editableTableContainer .editabletable_accept_btn:hover:before {
    color: $anchorHoverTextColour;
}
.editableTableContainer .editabletable_cancel_btn:hover:before {
    color: $anchorHoverTextColour;
}

.editableTableContainer .editabletable_insert_row .editabletable_reorder_up_btn,
.editableTableContainer .editabletable_insert_row .editabletable_reorder_down_btn
{
    display : none;
}

/* Resizable Panel */
.divider
{
    width : 6px;
    height : 100%;
    background-color: $backgroundColour;
    cursor : e-resize;
}

.temp_divider
{
    background: $panelHeaderColour;
    width : 2px;
    position : absolute;
    display : none;
}

.resizable_panel
{
    padding : 0px 3px 0px 3px;
}

.treeControl .treeviewTop
{
    list-style-type : none;
    margin-left : 0;
    padding-left : 0;
    line-height : 100%;
}

.treeControl .branch
{
    list-style-type : none;
    margin-left : 8px;
    padding-left : 0px;
}

.treeControl .leaf {
    margin-left:-17px;
}

.treeControl .leafText {
    font-size: $controlFontSize;
    text-decoration:none;
}

.treeControl .branch .sibling, .treeControl .branch .final-sibling {
    padding-left:15px;
    border-left:1px solid $defaultBorderColour;
}

.treeControl .node-collapsible, .treeControl .node-expandable, .treeControl .leaf
{
    white-space:nowrap;
    display:inline-block;
}

.treeControl .leaf:before,
.treeControl .node-collapsible:before,
.treeControl .node-expandable:before {
    font-family:'FontAwesome';
    display:inline-block;
    cursor : pointer;
    color: $defaultTextColour;
}

.treeControl .leaf:before {
    border-bottom: 1px solid;
    content: "";
    display: inline-block;
    margin-left: 2px;
    vertical-align: middle;
    width: 8px;
}

.treeControl .node-collapsible:before {
    content:"\f146";
}

.treeControl .node-expandable:before {
    content:"\f0fe";
}

/* Switch Control */
.switchControl .checkbox
{
    display : none;
}

.switchControl .controlBody
{
    height : 40px;
}

.switchControl .checkbox ~ label.switch
{
    display:inline-block;
    position: relative;
    cursor: pointer;
    width: 45px;
    height : 31px;
}

.switchControl .checkbox ~ label.switch:before
{
    position: absolute;
    top: 10px;
    left: 0px;
    content: ' ';
    width: 45px;
    height : 10px;
    background-color: $defaultControlBgColour;
    /*border: 1px solid $unselectedBorderColour*/;
    border-radius: 20px;
}

.switchControl .checkbox ~ label.switch:after
{
    position: absolute;
    left: 0px;
    content: ' ';
    width: 20px;
    height: 20px;
    top: 5px;
    background-color: $defaultBorderColour;
    /*border: 1px solid $unselectedBorderColour*/;
    border-radius: 20px;
    transition: all 100ms ease-in;
}

.switchControl .checkbox:checked ~ label.switch:before
{
    background-color: $buttonBgColour;
}

.switchControl .checkbox:checked ~ label.switch:after
{
    margin-left: 25px;
}


/** A Separator provides a horizontal (or vertical) dividing line, optionally with
 *  some text displayed in the middle.
 *  Dy default the line will be horizontal, but will switch to vertical if inside an
 *  appropriate layout group.
 */
.separator
{
    text-align : center;
    position : relative;
    overflow : hidden;
    margin : 1em 0.5em;
    color : $disabledTextColour;
}
.separator:before
{
    content : '';
    position: absolute;
    top : 50%;
    border-bottom-style : solid;
    border-bottom-width : 1px;
    width : 50%;
    margin-left : calc(-50% - 1em);
}
.separator:after
{
    content : '';
    position: absolute;
    top : 50%;
    border-bottom-style : solid;
    border-bottom-width : 1px;
    width : 50%;
    margin-left : 1em;
}

/** If no content, just show one full line. */
.separator:empty
{
    border-bottom-style : solid;
    border-bottom-width : 1px;
    height : 0;
}
.separator:empty:before, .separator:empty:after
{
    display : none;
}

/* Now adjust the separator based on whether the container layout is vertical or horizontal.
 * As we can have different layout settings for each breakpoint, we need to create classes for each breakpoint here.
 */
@include createForEachBreakpointWithDefault() using ($bp)
{
    /* Vertical layout */
    .layoutContainer.distributeVertically#{$bp} > .separator
    {
        align-self: stretch;
        display: block;
        margin : 1em 0.5em;
    }
     .layoutContainer.distributeVertically#{$bp} > .separator:before
    {
        top : 50%;
        left: auto;
    	border-bottom-style : solid;
    	border-bottom-width : 1px;
        border-right : none;
        height : 0;
    	width : 50%;
    	margin-left : calc(-50% - 1em);
    }
    .layoutContainer.distributeVertically#{$bp} > .separator:after
    {
        top : 50%;
        bottom:auto;
        left: auto;
    	border-bottom-style : solid;
    	border-bottom-width : 1px;
        border-right: none;
        height : 0;
    	width : 50%;
    	margin-left : 1em;
    }

    /* Horizontal layout, so switch to provide a vertical separator line. */
    .layoutContainer.distributeHorizontally#{$bp} > .separator
    {
        align-self: stretch;
        margin: 0.5em 1em;
        display: flex;
        align-items: center;
    }

    .layoutContainer.distributeHorizontally#{$bp} > .separator:before
    {
        top : 0;
        left : 50%;
        border-bottom : 0;
        border-right-style : solid;
        border-right-width : 1px;
        height : calc(50% - 1em);
        width : 0;
        margin-left : 0;
    }
    .layoutContainer.distributeHorizontally#{$bp} > .separator:after
    {
        top: auto;
        bottom : 0;
        left : 50%;
        border-bottom : 0;
        border-right-style : solid;
        border-right-width : 1px;
        height : calc(50% - 1em);
        width : 0;
        margin-left : 0;
    }

    /* Empty separator */
    .layoutContainer.distributeVertically#{$bp}> .separator:empty
    {
        border-bottom-style : solid;
        border-bottom-width : 1px;
        border-right:none;
        height : 0;
        width :auto;
    }
    .layoutContainer.distributeHorizontally#{$bp}> .separator:empty
    {
        border-bottom : none;
        border-right-style : solid;
        border-right-width : 1px;
        height : auto;
        width : 0;
    }
}



/* Autocomplete Control */

/* This sets an initial size for the select before it is transformed.
 * The resulting autocomplete control will honour this sizing. */
.autocompleteControl select {
    width : 300px;
}

/* The multi select to be transformed to the autocomplete - hide */
.autocompleteControl .select2-hidden-accessible {
    display:none;
}

/* Invisible overall container */
.autocompleteControl .select2-container {
    display: inline-block;
    vertical-align: middle;
}

/* Visible overall container */
.autocompleteControl .select2-container--default .select2-selection--multiple {
    cursor: text;
}

.autocompleteControl .select2-container .select2-selection--multiple {
    cursor: pointer;
    display: block;
}

/* Tags container */
.autocompleteControl .select2-container--default .select2-selection--multiple .select2-selection__rendered {
    list-style: outside none none;
    margin: 0px;
    padding: 0px; /*Override browser default styling*/
    width: 100%;
    min-height : 30px;
}

.autocompleteControl .select2-container .select2-selection--multiple .select2-selection__rendered {
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* Selected Tags */
.autocompleteControl .select2-container--default .select2-selection--multiple .select2-selection__choice {
    background-color: $backgroundColour;
    border: 1px solid $defaultBorderColour;
    border-radius: $smallBorderRadius;
    float: left;
    margin: 3px 3px 3px 0;
    padding: 2px;
}

/* Tag removal icons -- x */
.autocompleteControl .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
    color: $anchorColour;
    display: inline-block;
    margin-right: 2px;
}


/* Placeholder for the invisible search box at the end of the selected tags */
.autocompleteControl .select2-container .select2-search--inline {
    float: left;
    padding-top: 2px;
}

.autocompleteControl .select2-container--default .select2-search--inline .select2-search__field {
    background: transparent none repeat scroll 0% 0%;
    border: medium none;
    outline: 0px none;
}

.autocompleteControl .select2-container .select2-search--inline .select2-search__field {
    border: medium none;
    margin-top: 2px;
}

/* Dropdown with results under the main body - pop-up */
.select2-container--open .select2-dropdown--below {
    border-top: medium none;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
}

.select2-container--open .select2-dropdown {
    left: 0px;
}

.select2-dropdown {
    background-color: $defaultPanelColour;
    border: 1px solid $defaultBorderColour;
    border-radius: $smallBorderRadius;
    display: block;
    position: absolute;
    left: -100000px;
    width: 100%;
    z-index: 2500;
}

.select2-results {
    display: block;
}

.select2-container--default .select2-results > .select2-results__options {
    max-height: 200px;
    overflow-y: auto;
}

.select2-results__options {
    list-style: outside none none;
    margin: 0px;
    padding: 0px;
}

/* Selected results items */
.select2-container--default .select2-results__option[aria-selected="true"] {
    background-color: $backgroundColour;
}

/* Hovered results item */
.select2-container--default .select2-results__option--highlighted[aria-selected] {
    background-color: $defaultHoverBackgroundColour;
    color: $defaultTextColour;
}

.select2-results__option[aria-selected] {
    cursor: pointer;
}

.select2-results__option {
    padding: 2px;
}


/**
 * Data cards styling for showing blocks of data with multiple panels that can be toggled between.
 */
 .dataCardWrapper
 {
     float : left;
     margin : 20px;
     border : 1px solid $defaultBorderColour;
     border-radius : $smallBorderRadius;

     .dataCard
     {
         width : 400px;
         height : 300px;
         overflow : hidden;
         padding : 0 0 20px 0; //make space for the nav buttons at the bottom
         position : relative;
     }

     .dataCard > .dataCardPanel
     {
         position : absolute;
         top  : 0;
         left : 0;

         &.expandWidth {
             width : 100%;
         }

         &.expandHeight {
             height : 100%;
             height : calc(100% - 20px);
         }
     }

     .dataCard > .dataCardPanelNav
     {
         height : 16px;
         position : absolute;
         bottom : 0;
         left : 0;
         right : 0;
         top : auto;
         text-align : center;

         .dataCardPanelMarker
         {
             display : inline-block;
             width : 12px;
             height : 12px;
             border : 1px solid $defaultBorderColour;
             border-radius : $largeBorderRadius;
             margin : 0 5px;
             cursor : pointer;

             &.selected
             {
                 background : $defaultPanelColour;
             }
         }
     }
 }
 /* Stop any following components from overlapping the cards. */
 .dataCardEnd
 {
     clear : both;
 }

/** Nav bar control */
.navbar-container {
    transition: 0.8s;
    -webkit-transition:  0.8s;
}

.navbar-fixed-top {
    background-color: transparent;
    position: fixed;
    top:0;
    left : 0;
    right : 0;
    z-index : 1;
    height	: 100px;
}

.top-nav-collapse {
    background-color: $backgroundColour;
    height : 50px;
}

/**
 * Menu control styling.  The menu gets its main background styling from the group label selectors at the top of this file.
 */
.menuControl .controlBody
{
    /* Want the menu to stretch by default to fill container, so override inline-block
     * default display for controlBody. */
    display : block;
}
/* This is the hamburger icon shown when the menu is collapsed. */
.menuControl .menuToggle::before
{
    font-family:'FontAwesome';
    padding-left : 10px;
    padding-top : 2px;
    display:block;
    content:"\f0c9";
    color : $panelHeaderTextColour;
    cursor: pointer;
}
.menuControl .menu
{
    border : 1px solid $defaultBorderColour;
    border-radius : $smallBorderRadius;
    /* Remove top and bottom padding so that individual item hover styling can go right to the edge */
    padding-top : 0px;
    padding-bottom : 2px;

    /* Set a max height so we dont see a lot of space while the menu is loading */
    max-height : 42px;
}

/* If the menu is within a navbar, then we don't want to apply the default background styling
 * as the background will be across the whole nav bar.
 * This is only the case when the menu bar is in the expanded (always shown) state.  When
 * collapsed to the hamburger menu we do want the background colour when open */
 .navbar-container .menuControl .menu.expanded
 {
    border: none;
    background: none;
 }


.menuControl .menu .dijitMenuItem
{
    padding : 10px 10px;
    display:inline-block;
    color: $panelHeaderTextColour;
    font-size: $subHeadingFontSize;
}

.menuControl .menu .dijitMenuItemHover,
.menuControl .menu .dijitMenuItemSelected
{
    color: $buttonTextColour;
    background-color: $buttonBgColour;
}


.menuControlPopup
{
    margin: 5px 0;
    background-color: $defaultPanelColour !important;
    border: 1px solid $defaultBorderColour !important;
    border-radius: 0px 0px $smallBorderRadius;
    -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
    -webkit-background-clip: padding-box;
    background-clip: padding-box;
}

.menuControlPopup tr.dijitMenuItem td
{
    padding : 3px 0px;
}
.menuControlPopup tr.dijitMenuItem td.dijitMenuItemIconCell
{
    padding-left : 20px;
}
.menuControlPopup tr.dijitMenuItem td.dijitMenuArrowCell
{
    padding-right : 20px;
}
/* Stop the anchor styling from coming through if there is an a tag in the menu item due to an href event. */
.menuControl .menu .dijitMenuItem a, .menuControlPopup tr.dijitMenuItem a
{
    color: inherit;
    text-decoration: none;
}
.menuControlPopup .dijitMenuSeparatorTop
{
    border-bottom : none;
    margin-top : 5px;
}
.menuControlPopup .dijitMenuSeparatorBottom
{
    border-top : 1px solid $defaultBorderColour;
    margin-bottom : 5px;
}

/** Hover styling for the popup menu*/
.menuControlPopup tr.dijitMenuItemHover,
.menuControlPopup tr.dijitMenuItemSelected
{
    background-color: $buttonBgColour;
}
.menuControlPopup tr.dijitMenuItemHover td,
.menuControlPopup tr.dijitMenuItemSelected td
{
    color : $buttonTextColour;
}

.menuControlPopup tr.dijitMenuItem .dijitMenuExpand
{
    background-image : none;

}
.menuControlPopup tr.dijitMenuItem .dijitMenuExpand:before
{
    font-family:'FontAwesome';
    font-size: $smallFontIconSize;
    padding-left : 10px;
    padding-top : 2px;
    display:inline-block;
    content:"\f105";
}

.menuControlPopup tr.dijitMenuItem .dijitMenuExpandA11y {
    display:none;
}

/* Info Panel control */
.infoPanelControl {

    background-image: $panelImage;
    background-attachment: $panelImageAttachment;
    background-size: $panelImageSize;
    background-position: $panelImagePosition;
    background-repeat: $panelImageRepeat;

    .fontIconControl .controlBody .fontIcon.infoPanelIcon {
        font-size: $xLargeFontIconSize;
    }
}
.colorFilterControl {
    background-color: $panelFilterColour;
}


/* *************************************************************************************************** */
/* DISABLED STYLING                                                                                    */
/* *************************************************************************************************** */
.textboxControl .isDisabled .textbox, .dateControl .isDisabled .textbox, .dateControl .isDisabled .datePickerIcon, .splitDateControl .controlBody.isDisabled, .selectControl .isDisabled .select,
.multiSelectControl .isDisabled .select, .radioControl .controlBody.isDisabled, .checkboxControl .controlBody.isDisabled, .switchControl .isDisabled .checkbox ~ label.switch, .multiCheckboxControl .controlBody.isDisabled, .buttonControl .isDisabled .button, .hyperlinkControl .isDisabled .button, .textareaControl .isDisabled .textbox, .hyperlinkControl .isDisabled .hyperlink,
.currencyControl .isDisabled .dijitInputInner, .filteringSelectControl .isDisabled .dijitInputInner, .numberControl .isDisabled .dijitInputInner, .spinnerControl .isDisabled .dijitInputInner,
.richTextEditorControl .controlBody.isDisabled,
.secretControl .isDisabled .textbox, .pagingTableContainer .tablesorterPager .disabled,
.autocompleteControl .isDisabled .select2-container,
.editableTableContainer.isDisabled .editabletable_insert_btn,
.sliderControl .isDisabled{
    cursor:not-allowed;
    opacity:0.4 !important;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)"; /* IE8 */
    transition:none;
}

.textboxControl .isDisabled .placeholderIcon, .dateControl .isDisabled .placeholderIcon, .selectControl .isDisabled .placeholderIcon,
.multiSelectControl .isDisabled .placeholderIcon, .buttonControl .isDisabled .placeholderIcon, .textareaControl .isDisabled .placeholderIcon,
.hyperlinkControl .isDisabled .placeholderIcon, .currencyControl .isDisabled .placeholderIcon, .filteringSelectControl .isDisabled .placeholderIcon,
.numberControl .isDisabled .placeholderIcon, .spinnerControl .isDisabled .placeholderIcon, .secretControl .isDisabled .placeholderIcon,
.autocompleteControl .isDisabled .placeholderIcon {
    cursor:not-allowed;
    opacity:0.4 !important;
}

.autocompleteControl .isDisabled .select2-container--disabled .select2-selection__choice__remove {
    display:none;
}

.autocompleteControl .isDisabled .select2-container .select2-selection--multiple, .autocompleteControl .isDisabled .select2-container--disabled .select2-selection__choice {
    cursor:not-allowed;
}

.switchControl .isDisabled .checkbox {
    display:none;
}

.richTextEditorControl .isDisabled .richTextEditor.disabled {
    cursor: not-allowed;
}

.sliderControl .isDisabled input[type=range] {
    cursor: not-allowed;
}


/* *************************************************************************************************** */
/* GENERIC SELECTORS                                                                                   */
/* *************************************************************************************************** */
/* Use a conditional style to indicate that a field value is set by using an Image for display purposes. Data typically in repeating tables. */
.checkboxTrue:before
{
    font-family: 'FontAwesome';
    content: "\f00c";
    font-size: $smallFontIconSize;
    color: $defaultTextColour;
    display: inline-block;
}

.mapCanvas
{
    width: 600px;
    height: 400px;
}

.hyperlinkControl .printToWeb {
    /*text-decoration:none;*/
}

.hyperlinkControl .printToWeb:before
{
    font-family: 'FontAwesome';
    content: "\f02f  ";
}

@-webkit-keyframes loading {
    0%   {transform:rotate(0deg);}
    100% {transform:rotate(360deg);}
}
@keyframes loading {
    0%   {transform:rotate(0deg);}
    100% {transform:rotate(360deg);}
}
.ajaxLoading {
    display : inline-block;
    margin : 10px 0;
}
.ajaxLoading:before {
    font: normal normal normal 14px/1 FontAwesome;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-size: 18px;
    color : $defaultTextColour;
    content: "\f021";
    display: inline-block;
    height : 20px;
    width : 20px;
    margin : 5px;
    -webkit-animation: loading 2s linear 0s infinite;
    animation: loading 2s linear 0s infinite;
    -webkit-transform-origin: 40% 50%;
    -moz-transform-origin: 40% 50%;
    -ms-transform-origin: 40% 50%;
    -o-transform-origin: 40% 50%;
    transform-origin: 40% 50%;
}

/* hide the dojo error icon as we have our own error handling to use instead */
.controlBody .dijitValidationContainer {
    display:none;
}

.topLevelMessage, .messageBox
{
    color: $errorColour;
}

.hintIcon:before
{
    font-family: 'FontAwesome';
    content: "\f05a";
    display: inline-block;
    color: $defaultTextColour;
    cursor: help;
    padding : 0 5px;
    font-size : $mediumFontIconSize;
}

.errorIcon:before
{
    font-family: 'FontAwesome';
    content: "\f071";
    display: inline-block;
    color: $errorColour;
    padding : 0 5px;
    font-size : $mediumFontIconSize;
}

/* Top-level client-side error and the error/@desc attribute returned from the server in the control section. */
.topLevelMessage, .messageBox
{
    font-size: $labelFontSize;
    padding: 3px 3px 10px 3px;
}

/* Styles for the popup Hint tooltips. */
#tipDiv
{
    z-index: 3000 !important;
}
#messageDiv
{
    background: $defaultPanelColour;
    color: $defaultTextColour;
    border : 1px solid $defaultBorderColour;
    border-top : 15px solid $defaultBorderColour;
    border-radius: $smallBorderRadius;
    padding: 5px;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}


/*
    CONDITIONAL STYLES - The following styles are not created by default, but are often used for conditional styling requirements.
*/

.highlightRowBackground TD
{
    background-color: $defaultHoverBackgroundColour !important;
}

.highlightTextOverdue, .highlightTextOverdue INPUT, .highlightTextOverdue LABEL
{
    color: $errorColour !important; /* Overdue - red */
}
.highlightTextUrgent, .highlightTextUrgent INPUT, .highlightTextUrgent LABEL
{
    color: $errorColour !important; /* Urgent - orange */
}
.highlightTextCompleted, .highlightTextCompleted INPUT, .highlightTextCompleted LABEL
{
    color: $successColour !important; /* Completed - green */
}
.highlightTextImportant, .highlightTextImportant INPUT, .highlightTextImportant LABEL
{
    color: $emphasisColour !important;  /* Important - Blue */
}

.repeat .numberColumn
{
    text-align: right !important;
}
.repeat .numberColumn .dijitNumberTextBox,
.repeat .numberColumn .dijitCurrencyTextBox,
.form .repeat .numberColumn .dijitSpinner
{
    padding-right: 0.2em !important;
    text-align: right;
}
.repeat .numberColumn .dijitNumberTextBox input.dijitInputInner,
.repeat .numberColumn .dijitCurrencyTextBox input.dijitInputInner,
.repeat .numberColumn .dijitSpinner input.dijitInputInner
{
    padding-right: 0.2em !important;
    text-align: right;
}

.totalBox
{
    border: none !important;
    border-top: $defaultBorderColour 5px double !important;
    cursor: default !important;
}
.totalBox .dijitTextBox
{
    border: none !important;
    cursor: none !important;
    background-color: transparent;
}
.totalBox INPUT
{
    border: none !important;
    cursor: none !important;
    background-color: transparent;
}

.backgroundOff
{
    background-color: transparent;
    background-image: none;
    border-color: transparent;
    box-shadow: none;
}

/*  Shadow effect for borders */
.shadowBox
{
    -webkit-box-shadow:4px 4px 4px $defaultBorderColour;
    -moz-box-shadow:4px 4px 4px $defaultBorderColour;
    box-shadow:4px 4px 4px $defaultBorderColour;
}





/*plugin styles*/
.visualize { border: 1px solid $panelBorderColour; position: relative; background: $backgroundColour; }
.visualize canvas { position: absolute; }
.visualize ul,.visualize li { margin: 0; padding: 0;}

/*table title, key elements*/
.visualize .visualize-info { padding: 3px 5px; background: $defaultPanelColour; border: 1px solid $panelBorderColour; position: absolute; top: -20px; right: 10px; opacity: .8; }
.visualize .visualize-title { display: block; color: $panelHeaderTextColour; margin-bottom: 3px;  font-size: 1.1em; text-align: center; width: 90%;  }
.visualize ul.visualize-key { list-style: none;  }
.visualize ul.visualize-key li { list-style: none; float: left; margin-right: 10px; padding-left: 10px; position: relative;}
.visualize ul.visualize-key .visualize-key-color { width: 6px; height: 6px; left: 0; position: absolute; top: 50%; margin-top: -3px;  }
.visualize ul.visualize-key .visualize-key-label { color: $defaultTextColour; }

/*pie labels*/
.visualize-pie .visualize-labels { list-style: none; }
.visualize-pie .visualize-label-pos, .visualize-pie .visualize-label { position: absolute;  margin: 0; padding:0; }
.visualize-pie .visualize-label { display: block; color: $defaultTextColour; font-weight: bold; font-size: 1em; }
.visualize-pie-outside .visualize-label { color: $defaultTextColour; font-weight: normal; }

/*line,bar, area labels*/
.visualize-labels-x,.visualize-labels-y { position: absolute; left: 0; top: 0; list-style: none; }
.visualize-labels-x li, .visualize-labels-y li { position: absolute; bottom: 0; }
.visualize-labels-x li span.label, .visualize-labels-y li span.label { position: absolute; color: $defaultTextColour;  }
.visualize-labels-x li span.line, .visualize-labels-y li span.line {  position: absolute; border: 0 solid $panelBorderColour; }
.visualize-labels-x li { height: 100%; }
.visualize-labels-x li span.label { top: 100%; margin-top: 5px; }
.visualize-labels-x li span.line { border-left-width: 1px; height: 100%; display: block; }
.visualize-labels-x li span.line { border: 0;} /*hide vertical lines on area, line, bar*/
.visualize-labels-y li { width: 100%;  }
.visualize-labels-y li span.label { right: 100%; margin-right: 5px; display: block; width: 100px; text-align: right; }
.visualize-labels-y li span.line { border-top-width: 1px; width: 100%; }
.visualize-bar .visualize-labels-x li span.label { width: 100%; text-align: center; }




/* page styles */
.chartGroup tr {height: 21px;}
.chartGroup table.accessHide { position: absolute; left: -999999px; }

/*visualize extension styles*/
.visualize { margin: 0px 0 0 0px; padding: 70px 40px 90px; background-color: $backgroundColour; border: 1px solid $panelBorderColour; -moz-border-radius: $mediumBorderRadius; -webkit-border-radius: $mediumBorderRadius; border-radius: $mediumBorderRadius; }
.visualize canvas { border: 1px solid $panelBorderColour; margin: -1px; background-color: $backgroundColour; }
.visualize-labels-x, .visualize-labels-y { top: 70px; left: 40px; z-index: 100; }
.visualize-pie .visualize-labels { position: absolute; top: 70px; left: 40px; }
.visualize-labels-x li span.label, .visualize-labels-y li span.label { color: $defaultTextColour; font-size: 12px; padding-right: 5px; }
.visualize-labels-y li span.line { border-style: solid;  opacity: .7; }
.visualize .visualize-info { border: 0; position: static;  opacity: 1; background: none; }
.visualize .visualize-title { position: absolute; top: 20px; color: $panelHeaderTextColour; margin-bottom: 0; left: 20px; font-size: 18px; font-weight: bold; }
.visualize ul.visualize-key { position: absolute; bottom: 15px; background: $defaultPanelColour; z-index: 10; padding: 10px 0; color: $defaultTextColour; width: 100%; left: 0;  }
.visualize ul.visualize-key li { font-size: 12px;  margin-left: 20px; padding-left: 18px; }
.visualize ul.visualize-key .visualize-key-color { width: 10px; height: 10px;  margin-top: -4px; }
.visualize ul.visualize-key .visualize-key-label { color: $defaultTextColour; }







.dijitTooltip {
    position: absolute;
    z-index: 2000;
    display: block;
    left: 0;
    top: -10000px;
    overflow: visible;
    background: transparent;
}
.dijitTooltipContainer {
    background-color: $backgroundColour;
    border: 1px solid $defaultBorderColour;
    padding: 0.45em;
    color: $defaultTextColour;
    font-size: $bodyFontSize;
}

.dijitTooltipConnector {
    border: 0;
    z-index: 2;
    position: absolute;
    width : 20px;
    height : 20px;
}
.dijitTooltipConnector::after,
.dijitTooltipConnector::before {
    content: '';
    display: block;
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
}
.dijitBackgroundIframe {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    border: 0;
    padding: 0;
    margin: 0;
}

.dijitTooltipRight {

    padding-left: 10px;

    .dijitTooltipConnector {
        left : -9px;
    }
    .dijitTooltipConnector::after {
        top: 1px;
        right: 0;
        border-color: transparent $backgroundColour transparent transparent;
        border-width: 9px;
    }
    .dijitTooltipConnector::before {
        top: 0px;
        right: 0;
        border-color: transparent $defaultBorderColour transparent transparent;
        border-width: 10px;
    }
}

.dijitTooltipBelow {

    padding-top: 10px;

    .dijitTooltipConnector {
        top : -9px;
        left : 5px;
    }
    .dijitTooltipConnector::after {
        left: 1px;
        bottom : 0;
        border-color: transparent transparent $backgroundColour transparent;
        border-width: 9px;
    }
    .dijitTooltipConnector::before {
        left: 0px;
        bottom : 0;
        border-color: transparent transparent $defaultBorderColour transparent;
        border-width: 10px;
    }
}

.dijitTooltipAbove {

    padding-bottom: 10px;

    .dijitTooltipConnector {
        bottom : -9px;
        left : 5px;
    }
    .dijitTooltipConnector::after {
        left: 1px;
        top : 0;
        border-color: $backgroundColour transparent transparent transparent;
        border-width: 9px;
    }
    .dijitTooltipConnector::before {
        left: 0px;
        top : 0;
        border-color: $defaultBorderColour transparent transparent transparent;
        border-width: 10px;
    }
}



// FONT SCALING
// The following section handles scaling of font sizes, etc., based on breakpoints.
// The xsmall breakpoint is the default for all devices and is handled by the default settings defined earlier.
@include createForEachBreakpoint() using ($bp) {

    @if ($bp != 'Xsmall')
    {
        $smallScaleFactor : 1;		//Used for body text, controls, labels...
        $mediumScaleFactor: 1;		//Used for sub/section headings, group labels, border radius...
        $largeScaleFactor:1;		//Used for page headings...
        @if  ($bp == 'Small') {
            $smallScaleFactor : 1;
            $mediumScaleFactor: 1.1;
            $largeScaleFactor: 1.2;
        } @else if  ($bp == 'Medium') {
            $smallScaleFactor : 1;
            $mediumScaleFactor: 1.2;
            $largeScaleFactor: 1.4;
        } @else if  ($bp == 'Large') {
            $smallScaleFactor : 1.1;
            $mediumScaleFactor: 1.3;
            $largeScaleFactor: 1.8;
        } @else if  ($bp == 'Xlarge') {
            $smallScaleFactor : 1.2;
            $mediumScaleFactor: 1.5;
            $largeScaleFactor: 2.2;
        }

        .responsive {
            .pageHeadingControl .output {
                font-size: $pageHeadingFontSize * $largeScaleFactor;
            }
            .sectionHeadingControl .output {
                font-size: $sectionHeadingFontSize * $mediumScaleFactor;
            }
            .subHeadingControl .output {
                font-size: $subHeadingFontSize * $mediumScaleFactor;
            }
            .taglineControl .output {
                font-size: $taglineFontSize * $mediumScaleFactor;
            }
            .buttonControl .button, .hyperlinkControl .button {
                font-size: $controlFontSize * $mediumScaleFactor;
            }
            .labelControl  .label {
                font-size: $labelFontSize * $smallScaleFactor;
            }
            .groupWrapper > .labelControl .label,
            .tabContainer .selectedTab, .tabContainer .unselectedTab,
            .accordionContainer .dijitAccordionTitle,
            .collapsibleSection .collapsibleHeader .toggleLabelBackground,
            .dijitDialog .dijitDialogTitleBar {
                font-size: $subHeadingFontSize * $mediumScaleFactor;
            }
            .paragraph, .bodyTextControl .output {
                font-size: $bodyFontSize * $smallScaleFactor;
            }


            .buttonControl .button, .hyperlinkControl .button, .textboxControl .textbox, .selectControl .select, .dateControl .textbox, .splitDateControl .textbox,
            .multiSelectControl .select, .textareaControl .textbox, .secretControl .textbox,
            .currencyControl .dijitTextBox, .filteringSelectControl .dijitTextBox, .numberControl .dijitTextBox, .spinnerControl .dijitTextBox,
            .pagingTableContainer .tablesorterPager .pagesize, /*.pagingTableContainer .tablesorterPager .pagedisplay,*/
            .editableTableContainer .editabletable_insert_btn,
            .pagingTableContainer .tablesorter-filter-row .tablesorter-filter,
            .autocompleteControl .select2-container--default,
            #calendarDiv .cpSelectBtn, #calendarDiv select.cpMonthNavigation, #calendarDiv select.cpYearNavigation, #calendarDiv input.cpMonthNavigation, #calendarDiv input.cpYearNavigation,
            .fileUploadControl .button, .fileUploadControl .dragArea
            {
                border-radius: $smallBorderRadius * $mediumScaleFactor;
            }

            .textboxControl .textbox, .hyperlinkControl .hyperlink, .checkboxControl .checkbox, .switchControl .checkbox,
            .multiCheckboxControl .checkbox, .selectControl .select, .multiSelectControl .select, .radioControl .radio, .outputControl .output,
            .dateControl .textbox, .splitDateControl .textbox, .textareaControl .textbox, .secretControl .textbox, .customControl,
            .pagingTableContainer .tablesorterPager .pagesize, .pagingTableContainer .tablesorterPager .pagedisplay,
            #calendarDiv, #calendarDiv a, #messageDiv, #calendarDiv input.cpMonthNavigation, #calendarDiv input.cpYearNavigation,
            .topLevelMessage, .messageBox, .hintIcon, .errorIcon,
            .currencyControl .dijitInputInner, .filteringSelectControl .dijitInputInner, .numberControl .dijitInputInner, .spinnerControl .dijitInputInner,
            .treeControl .node-collapsible, .treeControl .node-expandable, .treeControl .leafText,
            .editableTableContainer .editabletable_insert_btn, .editableTableContainer .output,
            .richTextEditorControl .richTextEditor, .imageControl img,
            .pagingTableContainer .tablesorter-filter-row .tablesorter-filter,
            .autocompleteControl .select2-container .select2-selection--multiple .select2-selection__choice,
            .autocompleteControl .select2-container .select2-selection--multiple .select2-search__field, .select2-results__options,
            .autocompleteControl select.select.autocomplete,
            .repeat .noRepeatData,
            .fileUploadControl .button, .fileUploadControl .output, .fileUploadControl .dragArea,
            .menuControlPopup tr.dijitMenuItem td, .sliderControl .output
            {
                font-size: $controlFontSize * $smallScaleFactor;
            }

         	.fontIconControl .controlBody .fontIcon {
    			font-size: $largeFontIconSize * $smallScaleFactor;
            }
            .fontIconControl .controlBody .fontIcon.small-icon {
    			font-size: $smallFontIconSize * $smallScaleFactor;
            }
            .fontIconControl .controlBody .fontIcon.medium-icon {
    			font-size: $mediumFontIconSize * $smallScaleFactor;
            }
            .fontIconControl .controlBody .fontIcon.xlarge-icon {
    			font-size: $xLargeFontIconSize * $smallScaleFactor;
            }
            .fontIconControl .controlBody .fontIcon.jumbo-icon {
    			font-size: $jumboFontIconSize * $smallScaleFactor;
            }
        }
    }
}

//If needed you can use additional SASS mixins to generate breakpoint specific styling. eg
// renderForBreakpoint('small') using ($bp) { ... }                 - Outputs the content to apply to the given breakpoint and larger
// renderOnlyForBreakpoint('small') using ($bp) { ... }             - Outputs the content to apply only to the given breakpoint
// renderForBreakpointRange('medium', 'large') using ($bp) { ... }  - Outputs the content to apply to the given range of breakpoints






